{"version":3,"sources":["Footer.js","corona-1/components/ListItem.js","corona-1/components/SubTable.js","corona-1/components/Table.js","corona-1/components/GraphDataOptions.js","corona-1/components/GraphDataTimelineOptions.js","corona-1/components/GraphDataTotalOptions.js","corona-1/components/List.js","corona-1/components/Content.js","corona-2/components/InfoBar.js","corona-2/components/Map.js","corona-2/components/Timeline.js","corona-2/Content.js","corona-1/components/TableOnly.js","App.js","serviceWorker.js","index.js"],"names":["Footer","style","position","bottom","margin","width","backgroundColor","color","href","Date","getFullYear","ListItem","SubTable","props","data","console","log","district_data","district_wise","columns","all_keys","Object","keys","dataTable_data","key","i","parseInt","district_name","cases","confirmed","new_cases","delta","push","id","district","name","selector","sortable","fontWeight","format","row","left","className","title","noHeader","responsive","striped","keyField","defaultSortField","defaultSortAsc","dense","Table","state_wise","deaths","recovered","active","new_confirmed","new_deaths","new_recovered","new_active","state","total","new_total","expandableRows","expandableRowsComponent","graph_data_options","display","tooltips","mode","intersect","titleAlign","bodyAlign","footerAlign","maintainAspectRatio","scales","xAxes","stacked","ticks","autoSkip","reverse","yAxes","beginAtZero","type","maxTicksLimit","graph_data_timeline_options","text","fill","lineTension","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","graph_data_total_options","List","obj","copy_state","assign","this","kk","setState","url","fetch","then","res","json","change","dataLoaded","timelineLoaded","updateState","isLoaded","error","timeline_url","fetchAndSet","timeline","message","total_data","graph_data","states_name","states_cases","states_recovered","states_active","states_death","graph_data_timeline","timeline_date","timeline_death","timeline_cases","timeline_recovery","timeline_total","graph_data_total_pie","active_col","death_col","border_col","border_col_hover","labels","datasets","borderWidth","hoverBackgroundColor","hoverBorderColor","total_values","label","date","dailyconfirmed","dailyrecovered","dailydeceased","totalconfirmed","options","height","right","top","background","zIndex","src","alt","Component","Content","data_url","data_timeline_url","InfoBar","value","am4core","am4themes_animated","Map","setup_chart","bind","response","jsondata","getApiData","am4geodata_indiaHigh","india_dict","Promise","all","responses","hovered","india_total_stats","mapData","total_len","features","length","properties","color_circle","color_fill","Math","min","max","chart","am4maps","enabled","titles","create","geodata","focusable","projection","Miller","polygonSeries","series","useGeodata","nonScalingStroke","strokeWidth","calculateVisualCenter","polygonTemplate","mapPolygons","template","nonScaling","propertyFields","fillOpacity","currentComponent","events","on","ev","target","dataItem","_dataContext","dispose","TableOnly","App","path","basename","exact","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6fb8392a.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Footer() {\r\n    const footerStyle = {\r\n        position: 'fixed',\r\n        bottom: '0',\r\n        margin: 'auto',\r\n        width: '100%',\r\n        backgroundColor: 'white'\r\n    }\r\n    const footerLinkStyle = {\r\n    color:\"darkgrey\",\r\n\r\n    }\r\n\r\n    return (\r\n        <footer style={footerStyle}>\r\n            <a style={footerLinkStyle} href=\"https://akashraj.tech\">\r\n                 AkashRaj @{new Date().getFullYear()}\r\n            </a>\r\n        </footer>\r\n    )\r\n}\r\nexport default Footer","import React from \"react\"\r\nimport CardItem from './CardItem'\r\n\r\nimport { Pie } from 'react-chartjs-2';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nimport { HorizontalBar } from 'react-chartjs-2';\r\n\r\nfunction ListItem(props) {\r\n    // console.log(props);\r\n    let new_col = \"rgba(245,227,66,0.5)\"\r\n    // let new_col=\"rgba(255,50,40,0.4)\"\r\n    let active_col = \"rgba(245,227,66,0.5)\"\r\n    let recovered_col = \"rgba(81,245,66,0.5)\"\r\n    let death_col = \"rgba(255,99,132,0.5)\"\r\n\r\n    let new_col_hover = \"rgba(245,227,66,0.8)\"\r\n    let active_col_hover = \"rgba(245,227,66,0.8)\"\r\n    let recovered_col_hover = \"rgba(81,245,66,0.8)\"\r\n    let death_col_hover = \"rgba(255,99,132,0.8)\"\r\n\r\n    let border_col = \"rgba(201, 179, 193, 1)\"\r\n    let border_col_hover = \"rgba(201, 179, 193, 1)\"\r\n\r\n    const state_data = props.data\r\n    // console.log(state_data);\r\n\r\n\r\n    // let text_col: [active_col, recovered_col, death_col]\r\n    // let text = [state_data.active, state_data.recovered, state_data.deaths]\r\n\r\n    active_col = \"orange\";\r\n    death_col = \"red\";\r\n    recovered_col = \"green\";\r\n    border_col = \"black\";\r\n    if (state_data.hasOwnProperty('active')) {\r\n\r\n        return (\r\n\r\n            <tr>\r\n                <th scope=\"row\">{props.rank}</th>\r\n                <td>{state_data.state}</td>\r\n                <td style={{ color: border_col }}>{state_data.confirmed}\r\n                    <span className=\"blinking\"> {state_data.delta.confirmed ? \" (+\" + state_data.delta.confirmed + \")\" : \"\"}</span>\r\n                </td>\r\n                <td style={{ color: active_col }}>{state_data.active}\r\n                    <span className=\"blinking\" style={{ color: active_col }}> {state_data.delta.active ? \" (+\" + state_data.delta.active + \")\" : \"\"}</span>\r\n                </td>\r\n\r\n                <td style={{ color: death_col }}>{state_data.deaths}\r\n                    <span className=\"blinking\" style={{ color: death_col }}> {state_data.delta.deaths ? \" (+\" + state_data.delta.deaths + \")\" : \"\"}</span>\r\n                </td>\r\n                <td style={{ color: recovered_col }}>{state_data.recovered}\r\n                    <span className=\"blinking\" style={{ color: recovered_col }}>{state_data.delta.recovered ? \" (+\" + state_data.delta.recovered + \")\" : \"\"}</span>\r\n                </td>\r\n\r\n                {/* <td ><CardItem data={props.data} /></td> */}\r\n            </tr>\r\n            // <li className=\"list-group-item\">\r\n        )\r\n\r\n    } else {\r\n        return (<tr style={{ display: \"none\" }}></tr>)\r\n    }\r\n}\r\n\r\nexport default ListItem","import React from \"react\"\r\nimport DataTable from 'react-data-table-component';\r\n\r\nfunction SubTable(props) {\r\n    const data = props.data\r\n    console.log(data);\r\n    \r\n    if (!data) {\r\n        return (<div>No data!</div>)\r\n    }\r\n    const district_data = data.district_wise\r\n    if(!district_data){\r\n        \r\n        return (<div>No data!</div>)\r\n    }\r\n    let all_keys = Object.keys(district_data)\r\n    // console.log(all_keys);\r\n\r\n    let dataTable_data = []\r\n    let columns = {}\r\n    for (let key in all_keys) {\r\n        let i=parseInt(key)+1\r\n        key = all_keys[key]\r\n        // console.log(key,district_data[key]);\r\n        let district_name = key\r\n        let cases = parseInt(district_data[key].confirmed)\r\n        let new_cases = parseInt(district_data[key].delta.confirmed)\r\n        dataTable_data.push(\r\n            {\r\n                id: i,\r\n                district: district_name,\r\n                cases: cases,\r\n                new_cases: new_cases\r\n            }\r\n        )\r\n    }\r\n\r\n    columns = [\r\n        {\r\n            name: '#',\r\n            selector: 'id',\r\n            sortable: false,\r\n            style: {\r\n                fontWeight: \"500\",\r\n            },\r\n            width: \"50px\",\r\n            format: row => <span> > </span>,\r\n\r\n        },\r\n        {\r\n            name: 'District',\r\n            selector: 'district',\r\n            sortable: true,\r\n            left: true,\r\n            style: {\r\n                fontWeight: \"500\",\r\n            },\r\n            width: \"200px\"\r\n\r\n        },\r\n        {\r\n            name: 'Total',\r\n            selector: 'cases',\r\n            sortable: true,\r\n            left: true,\r\n            style: {\r\n                color: \"black\",\r\n                fontWeight: \"500\",\r\n            },\r\n            format: row => <span>{row.cases} <small className=\"blinking\">{row.new_cases > 0 ? \"+\" + row.new_cases : \"\"}</small></span>,\r\n            // cell:row => <div><div style={{ fontWeight: \"bold\" }}>{row.total}</div> +{row.new_total}</div>,\r\n        },\r\n\r\n\r\n\r\n    ];\r\n\r\n    // console.log(props.data)\r\n    return (<div>\r\n        {/* // {JSON.stringify(data)} */}\r\n        <div className=\"table-responsive\">\r\n            <DataTable\r\n                title={`District wise ${data.name}`}\r\n                noHeader={true}\r\n                // theme=\"dark\"\r\n                // title={false}\r\n                responsive={true}\r\n                striped={true}\r\n                keyField=\"id\"\r\n                defaultSortField=\"cases\"\r\n                defaultSortAsc={false}\r\n                dense={true}\r\n                columns={columns}\r\n                data={dataTable_data}\r\n                // expandableRows={true}\r\n                // expandableRowsComponent={<SubTable />}\r\n            />\r\n        </div>\r\n    </div>)\r\n\r\n}\r\n\r\nexport default SubTable","import React from \"react\"\r\nimport DataTable from 'react-data-table-component';\r\nimport SubTable from \"./SubTable\"\r\n\r\n\r\nfunction Table(props){\r\n    console.log(props)\r\n        // console.log(\"loggggggg\", data.state_wise);\r\n        const data=props.data\r\n        let all_keys = Object.keys(data.state_wise)\r\n        let i = 1;\r\n        let dataTable_data=[]\r\n        for (let key in all_keys) {\r\n            // console.log(key);\r\n            key = all_keys[key]\r\n            if (!data.state_wise[key].confirmed) {\r\n                continue\r\n            }\r\n            let confirmed = parseInt(data.state_wise[key].confirmed)\r\n            let deaths = parseInt(data.state_wise[key].deaths)\r\n            let recovered = parseInt(data.state_wise[key].recovered)\r\n            let active = parseInt(data.state_wise[key].active)\r\n\r\n            let new_confirmed = data.state_wise[key].delta.confirmed ? parseInt(data.state_wise[key].delta.confirmed) : 0\r\n            let new_deaths = data.state_wise[key].delta.deaths ? parseInt(data.state_wise[key].delta.deaths) : 0\r\n            let new_recovered = data.state_wise[key].delta.recovered ? parseInt(data.state_wise[key].delta.recovered) : 0\r\n            let new_active = data.state_wise[key].delta.active ? parseInt(data.state_wise[key].delta.active) : 0\r\n            let district_wise = data.state_wise[key].district\r\n\r\n\r\n         \r\n            dataTable_data.push(\r\n                {\r\n                    id: i,\r\n                    state: key,\r\n                    total: confirmed,\r\n                    active: active,\r\n                    deaths: deaths,\r\n                    recovered: recovered,\r\n                    new_total: new_confirmed,\r\n                    new_active: new_active,\r\n                    new_deaths: new_deaths,\r\n                    new_recovered: new_recovered,\r\n                    district_wise: district_wise,\r\n                }\r\n            )\r\n\r\n            // data_list.push(\r\n            //     <ListItem key={key} rank={i} data={data.state_wise[key]} />\r\n            // )\r\n            // card_list.push(\r\n            //     <CardItem key={i} rank={i} data={data.state_wise[key]} />\r\n            // )\r\n            i++\r\n        }\r\n\r\n        let columns = [\r\n            {\r\n                name: '#',\r\n                selector: 'id',\r\n                sortable: true,\r\n                style: {\r\n                    fontWeight: \"500\",\r\n                },\r\n                width: \"50px\"\r\n            },\r\n            {\r\n                name: 'State',\r\n                selector: 'state',\r\n                sortable: true,\r\n                left: true,\r\n                style: {\r\n                    fontWeight: \"500\",\r\n                },\r\n\r\n            },\r\n            {\r\n                name: 'Total',\r\n                selector: 'total',\r\n                sortable: true,\r\n                left: true,\r\n                style: {\r\n                    color: \"black\",\r\n                    fontWeight: \"500\",\r\n                },\r\n                format: row => <span>{row.total} <small className=\"blinking\">{row.new_total > 0 ? \"+\" + row.new_total : \"\"}</small></span>,\r\n                // cell:row => <div><div style={{ fontWeight: \"bold\" }}>{row.total}</div> +{row.new_total}</div>,\r\n                width: \"100px\"\r\n\r\n            },\r\n            {\r\n                name: 'Active',\r\n                selector: 'active',\r\n                sortable: true,\r\n                left: true,\r\n                style: {\r\n                    color: \"orange\",\r\n                    fontWeight: \"500\",\r\n                },\r\n                format: row => <span>{row.active} <small className=\"blinking\" style={{ color: \"red\" }}>{row.new_active > 0 ? \"+\" + row.new_active : \"\"}</small></span>,\r\n                width: \"100px\"\r\n\r\n\r\n            },\r\n            {\r\n                name: 'Deaths',\r\n                selector: 'deaths',\r\n                sortable: true,\r\n                left: true,\r\n                style: {\r\n                    color: \"red\",\r\n                    fontWeight: \"500\",\r\n                },\r\n                format: row => <span>{row.deaths} <small className=\"blinking\">{row.new_deaths > 0 ? \"+\" + row.new_deaths : \"\"}</small></span>,\r\n                width: \"100px\"\r\n\r\n\r\n            },\r\n            {\r\n                name: 'Recovered',\r\n                selector: 'recovered',\r\n                sortable: true,\r\n                left: true,\r\n                style: {\r\n                    color: \"green\",\r\n                    fontWeight: \"500\",\r\n                },\r\n                format: row => <span>{row.recovered} <small className=\"blinking\">{row.new_recovered > 0 ? \"+\" + row.new_recovered : \"\"}</small></span>,\r\n                width: \"100px\"\r\n\r\n\r\n            },\r\n\r\n        ];\r\n\r\n        return (\r\n            <DataTable\r\n            // title=\"State wise Data\"\r\n            noHeader={true}\r\n            // theme=\"dark\"\r\n            title={false}\r\n            responsive={true}\r\n            striped={true}\r\n            keyField=\"id\"\r\n            dense={true}\r\n            columns={columns}\r\n            data={dataTable_data}\r\n            expandableRows={true}\r\n            expandableRowsComponent={<SubTable/>}\r\n        />\r\n\r\n        )\r\n       \r\n    }\r\n\r\n\r\nexport default Table","let graph_data_options={\r\n    title: {\r\n        display: true,\r\n        // text: `COVID-19 INDIA STATE WISE (log scale) (where cases >${min_to_show})`\r\n    },\r\n    tooltips: {\r\n        mode: 'index',\r\n        intersect: false,\r\n        titleAlign: \"left\",\r\n        bodyAlign: \"left\",\r\n        footerAlign: \"left\",\r\n    },\r\n    responsive: true,\r\n    maintainAspectRatio: true,\r\n    // aspectRatio: 10,\r\n    // height:100,\r\n    scales: {\r\n        // scaleLabel :{\r\n        //     fontSize:1\r\n        // },\r\n        xAxes: [{\r\n            stacked: true,\r\n            ticks: {\r\n                autoSkip: true,\r\n                // maxTicksLimit: 10\r\n                reverse: true,\r\n            }\r\n\r\n        }],\r\n        yAxes: [{\r\n            stacked: true,\r\n            display: true,\r\n            beginAtZero: false,\r\n            type: \"logarithmic\",\r\n            ticks: {\r\n                autoSkip: true,\r\n                maxTicksLimit: 5\r\n                // min: 10,\r\n                // max:100,\r\n                // sampleSize:10,\r\n                // autoSkip:true,\r\n                // mirror:true,\r\n                // padding:10,\r\n            }\r\n        }]\r\n\r\n    },\r\n\r\n\r\n}\r\n\r\nexport default graph_data_options\r\n","let graph_data_timeline_options = {\r\n    title: {\r\n        display: true,\r\n        text: 'COVID-19 INDIA DAILY UPDATE'\r\n    },\r\n    tooltips: {\r\n        mode: 'index',\r\n        intersect: false,\r\n        position: 'nearest'\r\n    },\r\n    // responsive: true,\r\n    responsive: true,\r\n    maintainAspectRatio: true,\r\n    scales: {\r\n        xAxes: [{\r\n            stacked: false,\r\n\r\n            ticks: {\r\n                autoSkip: true,\r\n                maxTicksLimit: 20\r\n            }\r\n        }],\r\n        yAxes: [{\r\n            stacked: false,\r\n            type: \"logarithmic\",\r\n        }]\r\n    },\r\n    fill: true,\r\n    lineTension: 0.2,\r\n    backgroundColor: 'rgba(75,192,192,0.4)',\r\n    borderColor: 'rgba(75,192,192,1)',\r\n    borderCapStyle: 'butt',\r\n    borderDash: [],\r\n    borderDashOffset: 1.0,\r\n    borderJoinStyle: 'miter',\r\n    pointBorderColor: 'rgba(75,192,192,1)',\r\n    pointBackgroundColor: '#fff',\r\n    pointBorderWidth: 10,\r\n    pointHoverRadius: 50,\r\n    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n    pointHoverBorderWidth: 2,\r\n    pointRadius: 0.2,\r\n    pointHitRadius: 10,\r\n    // plugin: plugin_config,\r\n\r\n}\r\n\r\nexport default graph_data_timeline_options","let graph_data_total_options = {\r\n    title: {\r\n        display: true,\r\n        text: 'COVID-19 INDIA DAILY UPDATE'\r\n    },\r\n\r\n    tooltips: {\r\n        mode: 'index',\r\n        intersect: false,\r\n        position: 'nearest'\r\n    },\r\n    responsive: true,\r\n\r\n    fill: true,\r\n    lineTension: 0.1,\r\n    backgroundColor: 'rgba(75,192,192,0.4)',\r\n    borderColor: 'rgba(75,192,192,1)',\r\n    borderCapStyle: 'butt',\r\n    borderDash: [],\r\n    borderDashOffset: 0.0,\r\n    borderJoinStyle: 'miter',\r\n    pointBorderColor: 'rgba(75,192,192,1)',\r\n    pointBackgroundColor: '#fff',\r\n    pointBorderWidth: 1,\r\n    pointHoverRadius: 5,\r\n    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n    pointHoverBorderWidth: 2,\r\n    pointRadius: 1,\r\n    pointHitRadius: 10,\r\n    // plugin: plugin_config,\r\n\r\n}\r\n\r\nexport default graph_data_total_options","import React from \"react\"\r\nimport { Component } from \"react\"\r\nimport ListItem from \"./ListItem\"\r\nimport CardItem from \"./CardItem\"\r\nimport Table from \"./Table\"\r\nimport SubTable from \"./SubTable\"\r\n\r\nimport graph_data_options from \"./GraphDataOptions\"\r\nimport graph_data_timeline_options from \"./GraphDataTimelineOptions\"\r\nimport graph_data_total_options from \"./GraphDataTotalOptions\"\r\n// import 'chartjs-plugin-datalabels';\r\n\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Polar } from 'react-chartjs-2';\r\n\r\nimport DataTable from 'react-data-table-component';\r\n\r\n\r\nclass List extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            'isLoaded': false,\r\n            'data': {},\r\n            'timeline': {},\r\n            'dataLoaded': false,\r\n            'timelineLoaded': false,\r\n        }\r\n    }\r\n\r\n    updateState(obj) {\r\n        // console.log(\"Update called with\", obj);\r\n\r\n        let copy_state = Object.assign({}, this.state)\r\n        let keys = Object.keys(obj)\r\n        for (let key in keys) {\r\n            // console.log(keys[key]);\r\n            let kk = keys[key]\r\n            copy_state[kk] = obj[kk]\r\n        }\r\n        // copy_state[key] = value\r\n        // console.log(\"new state should have been\", copy_state);\r\n\r\n        this.setState(\r\n            copy_state\r\n        )\r\n    }\r\n    fetchAndSet(url, key) {\r\n        // console.log(\"before update \", this.state);\r\n        fetch(url).then(res => res.json()).then(\r\n            (data) => {\r\n\r\n                let change = {\r\n                    [key]: data,\r\n                    // isLoaded: true,\r\n                }\r\n                if (key === \"data\") {\r\n                    change.dataLoaded = true\r\n                }\r\n                if (key === \"timeline\") {\r\n                    change.timelineLoaded = true\r\n                }\r\n                this.updateState(change)\r\n\r\n                if (this.state.dataLoaded && this.state.timelineLoaded) {\r\n                    let change = {\r\n                        isLoaded: true,\r\n                    }\r\n                    this.updateState(change)\r\n                }\r\n                // console.log(\"after update\", this.state);\r\n                return true\r\n            },\r\n            (error) => {\r\n                let change = {\r\n                    error: error,\r\n                    isLoaded: true,\r\n                }\r\n                this.updateState(change)\r\n\r\n            }\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        let url = this.props.url\r\n        let timeline_url = this.props.timeline_url\r\n        this.fetchAndSet(url, 'data')\r\n        this.fetchAndSet(timeline_url, 'timeline')\r\n    }\r\n\r\n    render() {\r\n\r\n        const { error, isLoaded, data, timeline } = this.state;\r\n        // console.log(error, isLoaded, data);\r\n\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            let loader_style = {\r\n                position: \"fixed\",\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                left: \"0\",\r\n                right: \"0\",\r\n                top: \"58px\",\r\n                background: \"#fff\",\r\n                zIndex: \"999999999\",\r\n                bottom: \"0\",\r\n                // display: \"flex\",\r\n            }\r\n            return (<div className=\"loader\">\r\n                <div className=\"corona-loading\" style={loader_style}>\r\n                    <img src=\"./virus.png\" alt=\"\" />\r\n                    <p className=\"text-center\" style={{ margin: \"auto\" }}>Loading result ...</p>\r\n                </div>\r\n            </div>)\r\n        } else {\r\n\r\n            let min_to_show = 20;\r\n            let data_list = []\r\n            let card_list = []\r\n            // statewise\r\n            let total_data = []\r\n            let graph_data = {}\r\n            //    graph option at end\r\n            let states_name = []\r\n            let states_cases = []\r\n            let states_recovered = []\r\n            let states_active = []\r\n            let states_death = []\r\n\r\n            // timeline\r\n            let graph_data_timeline = {}\r\n            //    graph option at end\r\n            let timeline_date = []\r\n            let timeline_death = []\r\n            let timeline_cases = []\r\n            let timeline_recovery = []\r\n            let timeline_total = []\r\n\r\n            let graph_data_total_pie = {}\r\n\r\n            let new_col = \"rgba(245,227,66,0.5)\"\r\n            // let new_col=\"rgba(255,50,40,0.4)\"\r\n            let active_col = \"rgba(245,227,66,0.5)\"\r\n            let recovered_col = \"rgba(81,245,66,0.5)\"\r\n            let death_col = \"rgba(255,99,132,0.5)\"\r\n\r\n            let new_col_hover = \"rgba(245,227,66,0.8)\"\r\n            let active_col_hover = \"rgba(245,227,66,0.8)\"\r\n            let recovered_col_hover = \"rgba(81,245,66,0.8)\"\r\n            let death_col_hover = \"rgba(255,99,132,0.8)\"\r\n\r\n            let border_col = \"rgba(201, 179, 193, 1)\"\r\n            let border_col_hover = \"rgba(201, 179, 193, 1)\"\r\n\r\n\r\n            let dataTable_data = []\r\n            let columns = {}\r\n            if (this.state.isLoaded) {\r\n                if (this.state.dataLoaded) {\r\n                    // console.log(\"loggggggg\", data.state_wise);\r\n                    let all_keys = Object.keys(data.state_wise)\r\n                    let i = 1;\r\n\r\n                    for (let key in all_keys) {\r\n                        // console.log(key);\r\n                        key = all_keys[key]\r\n                        if (!data.state_wise[key].confirmed) {\r\n                            continue\r\n                        }\r\n                        let confirmed = parseInt(data.state_wise[key].confirmed)\r\n                        let deaths = parseInt(data.state_wise[key].deaths)\r\n                        let recovered = parseInt(data.state_wise[key].recovered)\r\n                        let active = parseInt(data.state_wise[key].active)\r\n\r\n                        let new_confirmed = data.state_wise[key].delta.confirmed ? parseInt(data.state_wise[key].delta.confirmed) : 0\r\n                        let new_deaths = data.state_wise[key].delta.deaths ? parseInt(data.state_wise[key].delta.deaths) : 0\r\n                        let new_recovered = data.state_wise[key].delta.recovered ? parseInt(data.state_wise[key].delta.recovered) : 0\r\n                        let new_active = data.state_wise[key].delta.active ? parseInt(data.state_wise[key].delta.active) : 0\r\n                        let district_wise = data.state_wise[key].district\r\n\r\n\r\n                        if (confirmed > min_to_show) {\r\n\r\n                            states_cases.push(confirmed)\r\n                            states_death.push(deaths)\r\n                            states_recovered.push(recovered)\r\n                            states_active.push(active)\r\n                            states_name.push(key)\r\n                        }\r\n                        dataTable_data.push(\r\n                            {\r\n                                id: i,\r\n                                state: key,\r\n                                total: confirmed,\r\n                                active: active,\r\n                                deaths: deaths,\r\n                                recovered: recovered,\r\n                                new_total: new_confirmed,\r\n                                new_active: new_active,\r\n                                new_deaths: new_deaths,\r\n                                new_recovered: new_recovered,\r\n                                district_wise: district_wise,\r\n                            }\r\n                        )\r\n\r\n                        // data_list.push(\r\n                        //     <ListItem key={key} rank={i} data={data.state_wise[key]} />\r\n                        // )\r\n                        // card_list.push(\r\n                        //     <CardItem key={i} rank={i} data={data.state_wise[key]} />\r\n                        // )\r\n                        i++\r\n                    }\r\n\r\n                    columns = [\r\n                        {\r\n                            name: '#',\r\n                            selector: 'id',\r\n                            sortable: true,\r\n                            style: {\r\n                                fontWeight: \"500\",\r\n                            },\r\n                            width: \"50px\"\r\n                        },\r\n                        {\r\n                            name: 'State',\r\n                            selector: 'state',\r\n                            sortable: true,\r\n                            left: true,\r\n                            style: {\r\n                                fontWeight: \"500\",\r\n                            },\r\n\r\n                        },\r\n                        {\r\n                            name: 'Total',\r\n                            selector: 'total',\r\n                            sortable: true,\r\n                            left: true,\r\n                            style: {\r\n                                color: \"black\",\r\n                                fontWeight: \"500\",\r\n                            },\r\n                            format: row => <span>{row.total} <small className=\"blinking\">{row.new_total > 0 ? \"+\" + row.new_total : \"\"}</small></span>,\r\n                            // cell:row => <div><div style={{ fontWeight: \"bold\" }}>{row.total}</div> +{row.new_total}</div>,\r\n                            width: \"100px\"\r\n\r\n                        },\r\n                        {\r\n                            name: 'Active',\r\n                            selector: 'active',\r\n                            sortable: true,\r\n                            left: true,\r\n                            style: {\r\n                                color: \"orange\",\r\n                                fontWeight: \"500\",\r\n                            },\r\n                            format: row => <span>{row.active} <small className=\"blinking\" style={{ color: \"red\" }}>{row.new_active > 0 ? \"+\" + row.new_active : \"\"}</small></span>,\r\n                            width: \"100px\"\r\n\r\n\r\n                        },\r\n                        {\r\n                            name: 'Deaths',\r\n                            selector: 'deaths',\r\n                            sortable: true,\r\n                            left: true,\r\n                            style: {\r\n                                color: \"red\",\r\n                                fontWeight: \"500\",\r\n                            },\r\n                            format: row => <span>{row.deaths} <small className=\"blinking\">{row.new_deaths > 0 ? \"+\" + row.new_deaths : \"\"}</small></span>,\r\n                            width: \"100px\"\r\n\r\n\r\n                        },\r\n                        {\r\n                            name: 'Recovered',\r\n                            selector: 'recovered',\r\n                            sortable: true,\r\n                            left: true,\r\n                            style: {\r\n                                color: \"green\",\r\n                                fontWeight: \"500\",\r\n                            },\r\n                            format: row => <span>{row.recovered} <small className=\"blinking\">{row.new_recovered > 0 ? \"+\" + row.new_recovered : \"\"}</small></span>,\r\n                            width: \"100px\"\r\n\r\n\r\n                        },\r\n\r\n                    ];\r\n                    total_data = data.total_values;\r\n                    graph_data_total_pie = {\r\n                        labels: [\"Active\", \"Recovered\", \"Deaths\"],\r\n                        datasets: [\r\n                            {\r\n                                // label: \"Active\",\r\n                                backgroundColor: [active_col, recovered_col, death_col],\r\n                                // backgroundColor: active_col,\r\n                                borderColor: border_col,\r\n                                borderWidth: 1,\r\n                                hoverBackgroundColor: [active_col, recovered_col, death_col],\r\n                                // hoverBackgroundColor: active_col_hover,\r\n                                hoverBorderColor: border_col_hover,\r\n                                data: [total_data.active, total_data.recovered, total_data.deaths],\r\n\r\n                            }]\r\n\r\n\r\n                    };\r\n                    graph_data = {\r\n                        labels: states_name,\r\n                        datasets: [\r\n                            {\r\n                                // label: \"India COVID-19-cases\",\r\n                                label: \"Active\",\r\n                                backgroundColor: active_col,\r\n                                borderColor: border_col,\r\n                                borderWidth: 1,\r\n                                hoverBackgroundColor: active_col_hover,\r\n                                hoverBorderColor: border_col_hover,\r\n                                data: states_active,\r\n\r\n                            }, {\r\n                                // label: \"India COVID-19-cases\",\r\n                                label: \"Recovered\",\r\n                                backgroundColor: recovered_col,\r\n                                borderColor: border_col,\r\n                                borderWidth: 1,\r\n                                hoverBackgroundColor: recovered_col_hover,\r\n                                hoverBorderColor: border_col_hover,\r\n                                data: states_recovered\r\n                            }, {\r\n                                // label: \"India COVID-19-cases\",\r\n                                label: \"Deaths\",\r\n                                backgroundColor: death_col,\r\n                                borderColor: border_col,\r\n                                borderWidth: 1,\r\n                                hoverBackgroundColor: death_col_hover,\r\n                                hoverBorderColor: border_col_hover,\r\n                                data: states_death\r\n                            },\r\n\r\n                        ]\r\n                    };\r\n                }\r\n                if (this.state.timelineLoaded) {\r\n\r\n                    for (let key in timeline) {\r\n                        let obj = timeline[key]\r\n                        timeline_date.push(obj.date)\r\n                        timeline_cases.push(obj.dailyconfirmed)\r\n                        timeline_recovery.push(obj.dailyrecovered)\r\n                        timeline_death.push(obj.dailydeceased)\r\n                        timeline_total.push(obj.totalconfirmed)\r\n                    }\r\n                    graph_data_timeline = {\r\n                        labels: timeline_date,\r\n                        datasets: [\r\n                            {\r\n                                // label: \"India COVID-19-cases\",\r\n                                type: 'line',\r\n                                // fill:0,\r\n                                fill: false,\r\n                                label: \"Total Till Date\",\r\n                                backgroundColor: death_col,\r\n                                borderColor: \"red\",\r\n                                borderWidth: 0.2,\r\n                                hoverBackgroundColor: death_col_hover,\r\n                                hoverBorderColor: border_col_hover,\r\n                                data: timeline_total,\r\n\r\n                            },\r\n                            {\r\n                                label: \"New Cases\",\r\n                                backgroundColor: new_col,\r\n                                borderColor: border_col,\r\n                                borderWidth: 0.2,\r\n                                hoverBackgroundColor: new_col_hover,\r\n                                hoverBorderColor: border_col_hover,\r\n                                data: timeline_cases\r\n                            },\r\n                            {\r\n                                label: \"New Recovery\",\r\n                                backgroundColor: recovered_col,\r\n                                borderColor: border_col,\r\n                                borderWidth: 0.2,\r\n                                hoverBackgroundColor: recovered_col_hover,\r\n                                hoverBorderColor: border_col_hover,\r\n                                data: timeline_recovery\r\n                            },\r\n                            {\r\n                                label: \"New Deaths\",\r\n                                backgroundColor: death_col,\r\n                                borderColor: border_col,\r\n                                borderWidth: 0.2,\r\n                                hoverBackgroundColor: death_col_hover,\r\n                                hoverBorderColor: border_col_hover,\r\n                                data: timeline_death\r\n                            },\r\n\r\n                        ]\r\n                    };\r\n                    // console.log(graph_data_timeline);\r\n\r\n                }\r\n            }\r\n\r\n\r\n            let plugin_config = {\r\n                // datalabels: {\r\n                //     display: 'auto',\r\n                // //    display: true,\r\n                //    color: 'white',\r\n                // //    padding:10,\r\n                // offset:100,\r\n                // anchor:\"end\"\r\n                // }\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            graph_data_options.title.text = `COVID-19 INDIA STATE WISE (log scale) (where cases >${min_to_show})`\r\n            return (\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 col-lg-6 my-2\">\r\n                        <h3>Total</h3>\r\n\r\n                        <Pie data={graph_data_total_pie}\r\n                            options={graph_data_total_options}\r\n                        />\r\n                        <span className=\"m-auto font-weight-bold\"> Total: {total_data.confirmed} </span>\r\n                        <span className=\"m-auto font-weight-bold\">/ Active: {total_data.active}</span>\r\n                        <span className=\"m-auto font-weight-bold\">/ Deaths: {total_data.deaths}</span>\r\n                        <span className=\"m-auto font-weight-bold\">/ Recovered: {total_data.recovered}</span>\r\n                        {/* <span class=\"m-auto font-weight-bold\"> Mortality: % </span> */}\r\n                        {/* <span class=\"m-auto font-weight-bold\"> Survival: % </span> */}\r\n                    </div>\r\n                    <div className=\"col-12 col-lg-6 my-2 mt-4\">\r\n                        <h3>State Wise data</h3>\r\n                        <Bar data={graph_data}\r\n                            width={100}\r\n                            height={80}\r\n                            options={graph_data_options}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"col-12 my-2 mt-4\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12 my-2\">\r\n                                <h3>Timeline of India</h3>\r\n\r\n                                <Line data={graph_data_timeline}\r\n                                    width={100}\r\n                                    height={60}\r\n                                    options={graph_data_timeline_options}\r\n                                />\r\n\r\n                            </div>\r\n                            <div className=\"col-12 my-2\">\r\n                                <h3>State Wise Data</h3>\r\n                            </div>\r\n                            <div className=\"table-responsive\">\r\n                                <Table data={data} />\r\n                            </div>\r\n\r\n                            <div className=\"col-6\">\r\n                                {/* {card_list} */}\r\n                            </div>\r\n\r\n                        </div >\r\n                    </div >\r\n                </div >\r\n\r\n\r\n            );\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default List","import React from \"react\"\r\nimport List from \"./List\"\r\nfunction Content(props){\r\n\r\nreturn(<div>\r\n    {/* <List url=\"https://akashraj.tech/corona/no_log_api\"> */}\r\n    <List url={props.data_url} timeline_url={props.data_timeline_url}>\r\n    {/* <List url=\"./data/api.json\" timeline_url=\"./data/timeline.json\"> */}\r\n    </List>\r\n</div>)\r\n\r\n}\r\n\r\nexport default Content\r\n","import React from \"react\"\r\n\r\nfunction InfoBar(props) {\r\n    const data = props.data\r\n    // console.log('infobar rendered')\r\n    // console.log(\"info bar props\",data);\r\n\r\n    let name = \"Hover over any state\"\r\n    let total = 0\r\n    let active = 0\r\n    let deaths = 0\r\n    let recovered = 0\r\n        if(data){\r\n            name = data.name\r\n            total = data.value\r\n            active = data.active\r\n            deaths = data.deaths\r\n            recovered = data.recovered\r\n        }\r\n    return (<div>\r\n        <h4>\r\n            {/* {} */}\r\n            {name}\r\n        </h4>\r\n       <span><span style={{fontWeight:\"bold\",color:\"black\"}}>Cases:  {total} /</span> </span>\r\n       <span><span style={{fontWeight:\"bold\",color:\"orange\"}}>Active:  {active} /</span> </span>\r\n       <span><span style={{fontWeight:\"bold\",color:\"red\"}}>Deaths:  {deaths} /</span> </span>\r\n       <span><span style={{fontWeight:\"bold\",color:\"green\"}}>Recovered:  {recovered} </span> </span>\r\n\r\n    </div>)\r\n}\r\n\r\nexport default InfoBar","import React, {\r\n    Component\r\n} from \"react\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport InfoBar from \"./InfoBar\";\r\n\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\n\r\nclass Map extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isLoaded: false,\r\n        }\r\n        this.setup_chart = this.setup_chart.bind(this)\r\n        // this.setState = this.setState.bind(this)\r\n\r\n\r\n    }\r\n\r\n\r\n    async getApiData(url, key) {\r\n        let response = await fetch(url)\r\n        let data = response.json()\r\n        const jsondata = await data\r\n        // console.log(jsondata);\r\n        // this.setState({ [key]: jsondata })\r\n        return jsondata\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        // console.log(\"map cpmpnent mount\");\r\n\r\n        let url = this.props.url\r\n        let india_map_url = \"./data/india_map.json\"\r\n        let india_map_dict = \"./data/india_map_dict.json\"\r\n        let data = this.getApiData(url, \"data\")\r\n        let am4geodata_indiaHigh = this.getApiData(india_map_url, \"am4geodata_indiaHigh\")\r\n        let india_dict = this.getApiData(india_map_dict, \"india_dict\")\r\n\r\n        Promise.all([data, am4geodata_indiaHigh, india_dict]).then((responses) =>\r\n            this.setState({\r\n                isLoaded: true,\r\n                data: responses[0],\r\n                am4geodata_indiaHigh: responses[1],\r\n                india_dict: responses[2],\r\n                hovered: {\r\n                    name: \"India\",\r\n                    value: responses[0].total_values.confirmed,\r\n                    active: responses[0].total_values.active,\r\n                    deaths: responses[0].total_values.deaths,\r\n                    recovered: responses[0].total_values.recovered,\r\n                }\r\n            })\r\n        ).then(() => this.setup_chart());\r\n        // console.log(\"after api calzzzz\", data, am4geodata_indiaHigh, india_dict)\r\n    }\r\n\r\n    setup_chart() {\r\n        // console.log(\"map setup chart\");\r\n\r\n        let enable_cirlce = false\r\n        let enable_legend = false\r\n        let enable_tooltip = false\r\n        let data = this.state.data\r\n        let am4geodata_indiaHigh = this.state.am4geodata_indiaHigh\r\n        let india_dict = this.state.india_dict\r\n\r\n        let india_total_stats = {\r\n            name: \"India\",\r\n            value: data.total_values.confirmed,\r\n            active: data.total_values.active,\r\n            deaths: data.total_values.deaths,\r\n            recovered: data.total_values.recovered,\r\n        }\r\n        // console.log(data.total_values);\r\n\r\n        // console.log(data);\r\n        // console.log(am4geodata_indiaHigh);\r\n        // console.log(india_dict);\r\n\r\n\r\n        if (this.state.error) {\r\n            return\r\n        }\r\n        let states_cases = []\r\n        // let states_name = []\r\n        // let states_recovered = []\r\n        // let states_active = []\r\n        // let states_death = []\r\n\r\n        let mapData = []\r\n\r\n        var total_len = am4geodata_indiaHigh.features.length\r\n        for (let i = 0; i < total_len; i++) {\r\n            let key = am4geodata_indiaHigh.features[i].properties.name\r\n            // console.log(key);\r\n            if (!key) {\r\n                continue\r\n            }\r\n\r\n            if (!parseInt(data.state_wise[key].confirmed)) {\r\n                data.state_wise[key].confirmed = 0\r\n            }\r\n\r\n            let confirmed = parseInt(data.state_wise[key].confirmed)\r\n            let deaths = parseInt(data.state_wise[key].deaths)\r\n            let recovered = parseInt(data.state_wise[key].recovered)\r\n            let active = parseInt(data.state_wise[key].active)\r\n            states_cases.push(confirmed)\r\n            // states_death.push(deaths)\r\n            // states_recovered.push(recovered)\r\n            // states_active.push(active)\r\n            // states_name.push(key)\r\n            // let color_circle = `rgba(${confirmed},${deaths},${recovered},0.2)`\r\n            // let color_fill = `rgba(${confirmed},${deaths},${recovered},0.2)`\r\n            let color_circle = `rgba(${confirmed},50,50,0.8)`\r\n            let color_fill = `rgba(${confirmed},100,100,0.8)`\r\n            am4geodata_indiaHigh.features[i].properties.value = confirmed\r\n            am4geodata_indiaHigh.features[i].properties.deaths = deaths\r\n            am4geodata_indiaHigh.features[i].properties.recovered = recovered\r\n            am4geodata_indiaHigh.features[i].properties.active = active\r\n            am4geodata_indiaHigh.features[i].properties.color = color_fill\r\n            mapData.push({\r\n                \"id\": india_dict[key],\r\n                \"name\": key,\r\n                \"value\": confirmed,\r\n                \"deaths\": deaths,\r\n                \"recovered\": recovered,\r\n                \"active\": active,\r\n                \"color\": color_circle,\r\n                \"tooltipColor\": \"red\",\r\n            })\r\n\r\n        }\r\n\r\n\r\n        let min_val = Math.min(...states_cases)\r\n        let max_val = Math.max(...states_cases)\r\n\r\n\r\n\r\n        // Themes begin\r\n        am4core.useTheme(am4themes_animated);\r\n        // Themes end\r\n\r\n        // Create map instance\r\n        var chart = am4core.create(\"map-chart-container\", am4maps.MapChart);\r\n        // chart.theme = \"dark\"\r\n\r\n        chart.responsive.enabled = true;\r\n\r\n\r\n        // heatmap legends\r\n        let heatLegend = null\r\n        if (enable_legend) {\r\n            heatLegend = chart.createChild(am4charts.HeatLegend);\r\n            heatLegend.minColor = am4core.color(`rgba(${min_val},50,50,0.8)`);\r\n            heatLegend.maxColor = am4core.color(`rgba(${max_val},50,50,0.8)`);\r\n            // heatLegend.maxColor = am4core.color(\"#ED7B84\");\r\n            heatLegend.minValue = min_val;\r\n            heatLegend.maxValue = max_val;\r\n            // heatLegend.series = states_cases;\r\n            heatLegend.width = am4core.percent(100);\r\n            heatLegend.valueAxis.renderer.labels.template.fontSize = 0;\r\n            heatLegend.valueAxis.renderer.labels.template.visible = false;\r\n            heatLegend.valueAxis.renderer.minGridDistance = 30;\r\n            heatLegend.markerContainer.height = 50;\r\n\r\n            heatLegend.orientation = \"vertical\";\r\n            heatLegend.postion = \"absolute\"\r\n            heatLegend.x = 10\r\n            heatLegend.y = 40\r\n            // heatLegend.markerContainer.height = am4core.percent(100);\r\n            heatLegend.labels = true;\r\n        }\r\n\r\n        var total_data = data.total_values\r\n        var title = chart.titles.create();\r\n        // title.text = ` Cases: [bold]${total_data.confirmed}[/] Recovered: [bold]${total_data.recovered}[/] Deaths: [bold]${total_data.deaths}`;\r\n        title.text = \"[bold font-size: 20]India COVID-19 Spread[/]\";\r\n        // title.textAlign = \"middle\";\r\n\r\n        chart.geodata = am4geodata_indiaHigh;\r\n        chart.focusable = true;\r\n\r\n        // Set projection\r\n        chart.projection = new am4maps.projections.Miller();\r\n\r\n        // Create map polygon series\r\n        var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n        // polygonSeries.exclude = [\"IN-MH\"];\r\n        polygonSeries.useGeodata = true;\r\n        polygonSeries.nonScalingStroke = true;\r\n        polygonSeries.strokeWidth = 0.5;\r\n        polygonSeries.calculateVisualCenter = true;\r\n\r\n        if (enable_cirlce) {\r\n\r\n            var imageSeries = chart.series.push(new am4maps.MapImageSeries());\r\n            imageSeries.data = mapData;\r\n            imageSeries.dataFields.value = \"value\";\r\n\r\n\r\n            var imageTemplate = imageSeries.mapImages.template;\r\n            imageTemplate.nonScaling = false\r\n\r\n        }\r\n\r\n        var polygonTemplate = polygonSeries.mapPolygons.template;\r\n        polygonTemplate.nonScaling = false\r\n        polygonTemplate.propertyFields.fill = \"color\";\r\n        polygonTemplate.fillOpacity = 1;\r\n\r\n        if (enable_tooltip) {\r\n\r\n            // set tooltip color\r\n            polygonSeries.tooltip.getFillFromObject = false;\r\n            polygonSeries.tooltip.background.fill = am4core.color(\"rgba(100,100,100,0.8)\");\r\n            polygonSeries.tooltip.label.fill = am4core.color(\"white\");\r\n            // \r\n\r\n            polygonTemplate.tooltipText = `[bold] {name}[/]\r\n        -------\r\n        Total: [bold]{value}[/] \r\n        Active: [bold]{active}[/] \r\n        Recovered: [bold]{recovered}[/] \r\n        Deaths: [bold]{deaths}`;\r\n        }\r\n        // var hs = polygonTemplate.states.create(\"hover\");\r\n        // hs.propertyFields.fill = \"color\";\r\n        // hs.fillOpacity = 0;\r\n\r\n        let currentComponent = this;\r\n\r\n        if (enable_cirlce) {\r\n\r\n            // set tooltip color\r\n            imageSeries.tooltip.getFillFromObject = false;\r\n            imageSeries.tooltip.background.fill = am4core.color(\"rgba(100,100,100,0.8)\");\r\n            imageSeries.tooltip.label.fill = am4core.color(\"white\");\r\n\r\n            var circle = imageTemplate.createChild(am4core.Circle);\r\n            circle.fillOpacity = 1;\r\n            circle.propertyFields.fill = \"color\";\r\n            if (enable_tooltip) {\r\n\r\n                circle.tooltipText = `[bold] {name}[/]\r\n            -------\r\n            Total: [bold]{value}[/] \r\n            Active: [bold]{active}[/] \r\n            Recovered: [bold]{recovered}[/] \r\n            Deaths: [bold]{deaths}`;\r\n            }\r\n            // console.log(states_cases)\r\n            // console.log(\"max\", Math.max(...states_cases))\r\n            imageSeries.heatRules.push({\r\n                \"target\": circle,\r\n                \"property\": \"radius\",\r\n                \"min\": 5,\r\n                \"max\": 50,\r\n                \"dataField\": \"value\"\r\n            })\r\n\r\n            imageTemplate.adapter.add(\"latitude\", function (latitude, target) {\r\n                var polygon = polygonSeries.getPolygonById(target.dataItem.dataContext.id);\r\n                if (polygon) {\r\n                    return polygon.visualLatitude;\r\n                }\r\n                return latitude;\r\n            })\r\n\r\n            imageTemplate.adapter.add(\"longitude\", function (longitude, target) {\r\n                var polygon = polygonSeries.getPolygonById(target.dataItem.dataContext.id);\r\n                if (polygon) {\r\n                    return polygon.visualLongitude;\r\n                }\r\n                return longitude;\r\n            })\r\n\r\n\r\n\r\n        }\r\n        polygonTemplate.events.on(\"over\", function (ev) {\r\n            currentComponent.setState({\r\n                hovered: ev.target.dataItem._dataContext\r\n            })\r\n            // console.log(ev.target.dataItem._dataContext);\r\n            if (enable_legend) {\r\n\r\n                if (!isNaN(ev.target.dataItem.value)) {\r\n                    heatLegend.valueAxis.showTooltipAt(ev.target.dataItem.value)\r\n                } else {\r\n                    heatLegend.valueAxis.hideTooltip();\r\n                }\r\n            }\r\n        });\r\n\r\n        polygonTemplate.events.on(\"out\", function (ev) {\r\n\r\n            if (enable_legend) {\r\n                heatLegend.valueAxis.hideTooltip();\r\n            }\r\n            currentComponent.setState({\r\n                hovered: india_total_stats\r\n            })\r\n\r\n\r\n        });\r\n\r\n        if (enable_cirlce) {\r\n\r\n            imageTemplate.events.on(\"over\", function (ev) {\r\n                currentComponent.setState({\r\n                    hovered: ev.target.dataItem._dataContext\r\n                })\r\n                if (enable_legend) {\r\n\r\n                    if (!isNaN(ev.target.dataItem.value)) {\r\n                        heatLegend.valueAxis.showTooltipAt(ev.target.dataItem.value)\r\n                    } else {\r\n                        heatLegend.valueAxis.hideTooltip();\r\n                    }\r\n                }\r\n            });\r\n\r\n            imageTemplate.events.on(\"out\", function (ev) {\r\n                currentComponent.setState({\r\n                    hovered: india_total_stats\r\n                })\r\n                if (enable_legend) {\r\n\r\n                    heatLegend.valueAxis.hideTooltip();\r\n                }\r\n            });\r\n\r\n            // console.log(chart);\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        if (this.chart) {\r\n            this.chart.dispose();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // console.log(\"in render\", this.state);\r\n        // console.log('map rendered')\r\n        let error = this.state.error\r\n        let isLoaded = this.state.isLoaded\r\n        if (error) {\r\n            return <div> Error: {error.message} </div>\r\n        } else if (!isLoaded) {\r\n            let loader_style = {\r\n                position: \"fixed\",\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                left: \"0\",\r\n                right: \"0\",\r\n                top: \"58px\",\r\n                background: \"#fff\",\r\n                zIndex: \"999999999\",\r\n                bottom: \"0\",\r\n            }\r\n            return (\r\n                <div className=\"loader\" >\r\n                    <div className=\"corona-loading\" style={loader_style}>\r\n                        <img className=\"mt-5\"\r\n                            src=\"./virus.png\"\r\n                            alt=\"\" />\r\n                        <p className=\"text-center\" style={{ margin: \"auto\" }}> Loading result... </p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n\r\n            return (\r\n\r\n                <div> {/* This is map */}\r\n                    <div id=\"map-chart-container\" style={{ width: \"100%\", height: \"100vh\" }}></div>\r\n\r\n                    <div id=\"info-bar\" style={{ position: \"fixed\", bottom: \"25px\", width: \"100%\" }}>\r\n                        <InfoBar data={this.state.hovered} />\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Map","import React, { Component } from \"react\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\n\r\nclass Timeline extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            mapLoaded: false,\r\n            mapData: {},\r\n            timelineLoaded: false,\r\n            timeline: {}\r\n        }\r\n    }\r\n\r\n    updateState(obj) {\r\n        // console.log(\"Update called with\", obj);\r\n\r\n        let copy_state = Object.assign({}, this.state)\r\n        let keys = Object.keys(obj)\r\n        for (let key in keys) {\r\n            // console.log(keys[key]);\r\n            let kk = keys[key]\r\n            copy_state[kk] = obj[kk]\r\n        }\r\n        // copy_state[key] = value\r\n        // console.log(\"new state should have been\", copy_state);\r\n\r\n\r\n        this.setState(\r\n            copy_state\r\n        )\r\n    }\r\n\r\n    fetchAndSet(url, key) {\r\n        // console.log(\"before update \", this.state);\r\n        fetch(url).then(res => res.json()).then(\r\n            (data) => {\r\n                // console.log(data);\r\n\r\n                // let change = {\r\n                //     [key]: data,\r\n                //     // isLoaded: true,\r\n                //     timelineLoaded: true,\r\n                // }\r\n                // if (key === \"data\") {\r\n                //     change.dataLoaded = true\r\n                // }\r\n                // if (key === \"timeline\") {\r\n                //     change.timelineLoaded = true\r\n                // }\r\n                // this.updateState(change)\r\n\r\n                // if (this.state.dataLoaded && this.state.timelineLoaded) {\r\n                //     let change = {\r\n                //         isLoaded: true,\r\n                //     }\r\n                //     this.updateState(change)\r\n                // }\r\n                // console.log(\"after update\", this.state);\r\n                return data\r\n            },\r\n            (error) => {\r\n                let change = {\r\n                    error: error,\r\n                    isLoaded: true,\r\n                }\r\n                this.updateState(change)\r\n\r\n            }\r\n        )\r\n    }\r\n    async componentDidMount() {\r\n\r\n        // let url = this.props.url\r\n        let timeline_url = this.props.timeline_url\r\n        // this.fetchAndSet(url, 'data')\r\n        // let timeline=this.fetchAndSet(timeline_url, 'timeline')\r\n        let timeline = await fetch(timeline_url).then(res => res.json())\r\n        // let timeline_data=await timeline;\r\n\r\n        // console.log('timeline', timeline);\r\n\r\n        let timeline_date = []\r\n        let timeline_death = []\r\n        let timeline_cases = []\r\n        let timeline_recovery = []\r\n        let timeline_total = []\r\n\r\n        // console.log(\"state---------\", this.state);\r\n        let data=[]\r\n        if (timeline) {\r\n            for (let key in timeline) {\r\n                let obj = timeline[key]\r\n                timeline_date.push(new Date(obj.date + \" 2020\"))\r\n                timeline_cases.push(obj.dailyconfirmed)\r\n                timeline_recovery.push(obj.dailyrecovered)\r\n                timeline_death.push(-obj.dailydeceased)\r\n                timeline_total.push(obj.totalconfirmed)\r\n                data.push({date:new Date(obj.date + \" 2020\"),name:\"Death\" ,value: parseInt(obj.dailyconfirmed)})\r\n                // data.push({date:new Date(obj.date + \" 2020\"),name:\"Recovery\" ,value: parseInt(obj.dailyrecovered)})\r\n            }\r\n        }\r\n\r\n        // console.log(timeline_date);\r\n        let chart = am4core.create(\"chart-timeline-container\", am4charts.XYChart);\r\n        chart.paddingRight = 20;\r\n\r\n        chart.data = data;\r\n        // console.log(data);\r\n\r\n        let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n        dateAxis.renderer.grid.template.location = 0;\r\n\r\n        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n        valueAxis.tooltip.disabled = true;\r\n        valueAxis.renderer.minWidth = 1;\r\n\r\n        let series = chart.series.push(new am4charts.LineSeries());\r\n        series.dataFields.dateX = \"date\";\r\n        series.dataFields.valueY = \"value\";\r\n\r\n        series.tooltipText = \"On {dateX} - {valueY.value} new cases\";\r\n        chart.cursor = new am4charts.XYCursor();\r\n\r\n        let scrollbarX = new am4charts.XYChartScrollbar();\r\n        scrollbarX.series.push(series);\r\n        chart.scrollbarX = scrollbarX;\r\n\r\n        this.chart = chart;\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        if (this.chart) {\r\n            this.chart.dispose();\r\n        }\r\n    }\r\n\r\n   \r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n\r\n            <div className=\"my-4\">\r\n            <h4>\r\n                Interactive Timeline\r\n            </h4>\r\n            <div id=\"chart-timeline-container\" style={{ width: \"100%\", height: \"500px\" }}></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Timeline","import React from \"react\"\r\nimport Map from \"./components/Map\"\r\nimport Timeline from \"./components/Timeline\"\r\nfunction Content(props){\r\n\r\nreturn(<div>\r\n    <Map url={props.data_url} timeline_url={props.data_timeline_url}>\r\n    </Map>\r\n    {/* <Timeline url={props.data_url} timeline_url={props.data_timeline_url}>\r\n    </Timeline> */}\r\n</div>)\r\n\r\n}\r\n\r\nexport default Content\r\n","import React from \"react\"\r\nimport Table from \"./Table\"\r\nimport { Component } from \"react\"\r\n\r\nclass TableOnly extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isLoaded: false,\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    async getApiData(url, key) {\r\n        let response = await fetch(url)\r\n        let data = response.json()\r\n        const jsondata = await data\r\n        // console.log(jsondata);\r\n        // this.setState({ [key]: jsondata })\r\n        return jsondata\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        // console.log(\"map cpmpnent mount\");\r\n\r\n        let url = this.props.data_url\r\n        let data = this.getApiData(url, \"data\")\r\n\r\n        Promise.all([data]).then((responses) =>\r\n            this.setState({\r\n                isLoaded: true,\r\n                data: responses[0],\r\n            })\r\n        )\r\n        // console.log(\"after api calzzzz\", data, am4geodata_indiaHigh, india_dict)\r\n    }\r\n\r\n  \r\n   \r\n    render() {\r\n        // console.log(\"in render\", this.state);\r\n        // console.log('map rendered')\r\n        let error = this.state.error\r\n        let isLoaded = this.state.isLoaded\r\n        if (error) {\r\n            return <div> Error: {error.message} </div>\r\n        } else if (!isLoaded) {\r\n            let loader_style = {\r\n                position: \"fixed\",\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                left: \"0\",\r\n                right: \"0\",\r\n                top: \"58px\",\r\n                background: \"#fff\",\r\n                zIndex: \"999999999\",\r\n                bottom: \"0\",\r\n            }\r\n            return (\r\n                <div className=\"loader\" >\r\n                    <div className=\"corona-loading\" style={loader_style}>\r\n                        <img className=\"mt-5\"\r\n                            src=\"./virus.png\"\r\n                            alt=\"\" />\r\n                        <p className=\"text-center\" style={{ margin: \"auto\" }}> Loading result... </p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n\r\n            return (\r\n\r\n                <div> \r\n                   <Table data={this.state.data} />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default TableOnly","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\n\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport Header from \"./Header\"\r\nimport Footer from \"./Footer\"\r\nimport CoronaPage1 from \"./corona-1/components/Content\"\r\nimport CoronaPage2 from \"./corona-2/Content\"\r\nimport TableOnly from \"./corona-1/components/TableOnly\"\r\nimport Menu from \"./Menu/Menu\"\r\n\r\nfunction App() {\r\n  const menuItems = [\r\n    {\r\n      text: 'Map',\r\n      href: \"/\",\r\n    },\r\n    {\r\n      text: 'Graph',\r\n      href: \"/graph\",\r\n    },\r\n    {\r\n      text: 'District Wise',\r\n      href: \"/table\",\r\n    },\r\n    {\r\n      text: 'Back',\r\n      href: \"/../\",\r\n    },\r\n  ]\r\n\r\n  // const data_url=\"https://akashraj.tech/corona/no_log_api\"\r\n  const data_url = \"https://akashraj.tech/corona/api_india\"\r\n  const data_timeline_url = \"https://akashraj.tech/corona/api_india_timeline\"\r\n  // const data_url=\"./data/api.json\"\r\n  // const data_timeline_url=\"./data/timeline.json\"\r\n  const menu_enable=false\r\n  const install_directory = \"/corona/react_mod\"\r\n\r\n  const menu_placeholder=menu_enable?  <Menu menu_items={menuItems} /> : \"\"\r\n  return (\r\n    <div className=\"App\">\r\n      <Router path={\"/\"} basename={install_directory}>\r\n        {menu_placeholder}\r\n        \r\n        {/* <Header /> */}\r\n        {/* <div className=\"container\"> */}\r\n        {/* <div className=\"mx-2 mx-md-5 mx-xl-5 px-0 px-md-5 px-xl-5\"> */}\r\n        <div className=\"m-2\">\r\n          <Switch>\r\n            {/* <Route path=\"/\" exact component={CoronaPage1} /> */}\r\n            <Route path=\"/\" exact render={(props) => <CoronaPage2 {...props} data_url={data_url} data_timeline_url={data_timeline_url} />} />\r\n            <Route path=\"/graph\" exact render={(props) => <CoronaPage1 {...props} data_url={data_url} data_timeline_url={data_timeline_url} />} />\r\n            <Route path=\"/table\" exact render={(props) => <TableOnly {...props} data_url={data_url} data_timeline_url={data_timeline_url} />} />\r\n            {/* <Route path=\"/2\" component={CoronaPage2} /> */}\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n      <Footer />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
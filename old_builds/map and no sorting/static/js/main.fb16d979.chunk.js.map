{"version":3,"sources":["Header.js","Footer.js","corona-1/components/CardItem.js","corona-1/components/ListItem.js","corona-1/components/List.js","corona-1/components/Content.js","corona-2/components/Map.js","corona-2/components/Timeline.js","corona-2/Content.js","Menu/MenuItem.js","Menu/Menu.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","style","position","bottom","margin","width","backgroundColor","Date","getFullYear","CardItem","props","state_data","data","labels","state","datasets","label","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","recovered","deaths","graph_options","title","display","text","tooltips","mode","intersect","responsive","maintainAspectRatio","aspectRatio","scales","xAxes","stacked","gridLines","drawBorder","yAxes","legend","hasOwnProperty","height","options","ListItem","scope","rank","color","active","delta","confirmed","List","obj","copy_state","Object","assign","this","keys","key","kk","setState","url","fetch","then","res","json","change","dataLoaded","timelineLoaded","updateState","isLoaded","error","timeline_url","fetchAndSet","timeline","message","data_list","card_list","total_data","graph_data","states_name","states_cases","states_recovered","states_active","states_death","graph_data_timeline","timeline_date","timeline_death","timeline_cases","timeline_recovery","timeline_total","graph_data_total_pie","active_col","death_col","border_col","border_col_hover","console","log","state_wise","all_keys","i","push","total_values","date","dailyconfirmed","dailyrecovered","dailydeceased","totalconfirmed","type","fill","plugin_config","graph_data_options","titleAlign","bodyAlign","footerAlign","ticks","autoSkip","reverse","beginAtZero","maxTicksLimit","plugin","graph_data_timeline_options","lineTension","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","graph_data_total_options","left","right","top","background","zIndex","src","alt","Component","Content","data_url","data_timeline_url","am4core","am4themes_animated","Map","india_map_url","india_map_dict","am4geodata_indiaHigh","india_dict","mapData","total_len","features","length","properties","name","parseInt","color_circle","color_fill","value","min_val","Math","min","max_val","max","chart","am4maps","enabled","heatLegend","createChild","am4charts","minColor","maxColor","minValue","maxValue","valueAxis","renderer","template","fontSize","minGridDistance","orientation","titles","create","geodata","focusable","projection","Miller","polygonSeries","series","useGeodata","nonScalingStroke","strokeWidth","calculateVisualCenter","imageSeries","dataFields","imageTemplate","mapImages","nonScaling","polygonTemplate","mapPolygons","propertyFields","fillOpacity","tooltipText","hs","states","circle","heatRules","adapter","add","latitude","target","polygon","getPolygonById","dataItem","dataContext","id","visualLatitude","longitude","visualLongitude","events","on","ev","isNaN","hideTooltip","showTooltipAt","dispose","MenuItem","to","href","Menu","menu_list","menu_items","map","index","data-toggle","aria-controls","aria-expanded","aria-label","App","path","basename","exact","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.fb16d979.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Header(){\r\n    return(\r\n        <header className=\"header\">\r\n            <h3 className=\"text-muted\">COVID-19</h3>\r\n        </header>\r\n    )\r\n}\r\nexport default Header","import React from \"react\"\r\n\r\nfunction Footer(){\r\n    const footerStyle={position: 'fixed',\r\n        bottom: '0',\r\n        margin: 'auto',\r\n        width: '100%',\r\n        backgroundColor:'white'\r\n    }\r\n    return(\r\n        <footer style={footerStyle}>\r\n            AkashRaj@{new Date().getFullYear()}\r\n        </footer>\r\n    )\r\n}\r\nexport default Footer","import React from \"react\"\r\nimport {Pie} from 'react-chartjs-2';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nimport { HorizontalBar } from 'react-chartjs-2';\r\n\r\nfunction CardItem(props) {\r\n    // console.log(props);\r\n    let new_col = \"rgba(245,227,66,0.5)\"\r\n    // let new_col=\"rgba(255,50,40,0.4)\"\r\n    let active_col = \"rgba(245,227,66,0.5)\"\r\n    let recovered_col = \"rgba(81,245,66,0.5)\"\r\n    let death_col = \"rgba(255,99,132,0.5)\"\r\n\r\n    let new_col_hover = \"rgba(245,227,66,0.8)\"\r\n    let active_col_hover = \"rgba(245,227,66,0.8)\"\r\n    let recovered_col_hover = \"rgba(81,245,66,0.8)\"\r\n    let death_col_hover = \"rgba(255,99,132,0.8)\"\r\n\r\n    let border_col = \"rgba(201, 179, 193, 1)\"\r\n    let border_col_hover = \"rgba(201, 179, 193, 1)\"\r\n\r\n    const state_data = props.data\r\n    const data = {\r\n        labels:[`${state_data.state}`],\r\n        // label: [\"Active\",\"Recovered\",\"Deaths\"],\r\n        // labels: [\"Active\",\"Recovered\",\"Deaths\"],\r\n        // datasets: [\r\n        //     {\r\n        //         // label: \"Active\",\r\n        //         backgroundColor:[active_col,recovered_col,death_col],\r\n        //         // backgroundColor: active_col,\r\n        //         borderColor: border_col,\r\n        //         borderWidth: 1,\r\n        //         hoverBackgroundColor: [active_col,recovered_col,death_col],\r\n        //         // hoverBackgroundColor: active_col_hover,\r\n        //         hoverBorderColor: border_col_hover,\r\n        //         data: [state_data.active,state_data.recovered,state_data.deaths]\r\n        //     },\r\n        // ]\r\n        // for bar graph\r\n        datasets: [\r\n            // {\r\n            //     label: \"Active\",\r\n            //     backgroundColor: active_col,\r\n            //     borderColor: border_col,\r\n            //     borderWidth: 1,\r\n            //     hoverBackgroundColor: active_col_hover,\r\n            //     hoverBorderColor: border_col_hover,\r\n            //     data: [state_data.active]\r\n            // },\r\n            {\r\n                label: \"Recovered\",\r\n                backgroundColor: recovered_col,\r\n                borderColor: border_col,\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: recovered_col_hover,\r\n                hoverBorderColor: border_col_hover,\r\n                data: [state_data.recovered]\r\n            },\r\n            {\r\n                label: \"Deaths\",\r\n                backgroundColor: death_col,\r\n                borderColor: border_col,\r\n                borderWidth: 1,\r\n                hoverBackgroundColor: death_col_hover,\r\n                hoverBorderColor: border_col_hover,\r\n                data: [-state_data.deaths]\r\n            },\r\n        ]\r\n    };\r\n    let graph_options = {\r\n        title: {\r\n            display: false,\r\n            text: `COVID-19 ${state_data.state}`\r\n        },\r\n        \r\n        tooltips: {\r\n            mode: 'index',\r\n            intersect: false\r\n        },\r\n        responsive: true,\r\n                maintainAspectRatio: true,\r\n                aspectRatio: 2,\r\n        scales: {\r\n            xAxes: [{\r\n                stacked: true,\r\n                gridLines: {\r\n                    drawBorder: false,\r\n                  },\r\n                //   display: false,\r\n            }],\r\n            yAxes: [{\r\n                stacked: true,\r\n                gridLines: {\r\n                    drawBorder: false,\r\n                  },\r\n                  display: false,\r\n\r\n            }]\r\n        },\r\n        legend: {\r\n            display: false\r\n        },\r\n        // for pie chart\r\n        \r\n\r\n    }\r\n    if (state_data.hasOwnProperty('active')){\r\n\r\n    return (\r\n        <div className=\"\">\r\n            {/* <h6 className=\"small\">\r\n                {state_data.state}\r\n            </h6> */}\r\n            {/* <Bar data={data} */}\r\n            <HorizontalBar data={data}\r\n            width={100}\r\n            height={20}\r\n                options={graph_options}\r\n            />\r\n        </div>\r\n       \r\n    )\r\n    }\r\n    else{\r\n        return(<div style={{display:\"none\"}}></div>)\r\n    }\r\n}\r\n\r\nexport default CardItem","import React from \"react\"\r\nimport CardItem from './CardItem'\r\n\r\nimport { Pie } from 'react-chartjs-2';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nimport { HorizontalBar } from 'react-chartjs-2';\r\n\r\nfunction ListItem(props) {\r\n    // console.log(props);\r\n    let new_col = \"rgba(245,227,66,0.5)\"\r\n    // let new_col=\"rgba(255,50,40,0.4)\"\r\n    let active_col = \"rgba(245,227,66,0.5)\"\r\n    let recovered_col = \"rgba(81,245,66,0.5)\"\r\n    let death_col = \"rgba(255,99,132,0.5)\"\r\n\r\n    let new_col_hover = \"rgba(245,227,66,0.8)\"\r\n    let active_col_hover = \"rgba(245,227,66,0.8)\"\r\n    let recovered_col_hover = \"rgba(81,245,66,0.8)\"\r\n    let death_col_hover = \"rgba(255,99,132,0.8)\"\r\n\r\n    let border_col = \"rgba(201, 179, 193, 1)\"\r\n    let border_col_hover = \"rgba(201, 179, 193, 1)\"\r\n\r\n    const state_data = props.data\r\n    // console.log(state_data);\r\n\r\n\r\n    // let text_col: [active_col, recovered_col, death_col]\r\n    // let text = [state_data.active, state_data.recovered, state_data.deaths]\r\n\r\n    active_col = \"orange\";\r\n    death_col = \"red\";\r\n    recovered_col = \"green\";\r\n    border_col = \"black\";\r\n    if (state_data.hasOwnProperty('active')) {\r\n\r\n        return (\r\n\r\n            <tr>\r\n                <th scope=\"row\">{props.rank}</th>\r\n                <td>{state_data.state}</td>\r\n                <td style={{ color: active_col }}>{state_data.active}\r\n                    {state_data.delta.active ? \" (+\" + state_data.delta.active + \")\" : \"\"}</td>\r\n\r\n                <td style={{ color: death_col }}>{state_data.deaths}\r\n                    {state_data.delta.deaths ? \" (+\" + state_data.delta.deaths + \")\" : \"\"}\r\n                </td>\r\n                <td style={{ color: recovered_col }}>{state_data.recovered}\r\n                    {state_data.delta.recovered ? \" (+\" + state_data.delta.recovered + \")\" : \"\"}\r\n                </td>\r\n                <td style={{ color: border_col }}>{state_data.confirmed}\r\n                    {state_data.delta.confirmed ? \" (+\" + state_data.delta.confirmed + \")\" : \"\"}\r\n                </td>\r\n                {/* <td ><CardItem data={props.data} /></td> */}\r\n            </tr>\r\n            // <li className=\"list-group-item\">\r\n        )\r\n\r\n    } else {\r\n        return (<tr style={{ display: \"none\" }}></tr>)\r\n    }\r\n}\r\n\r\nexport default ListItem","import React from \"react\"\r\nimport { Component } from \"react\"\r\nimport ListItem from \"./ListItem\"\r\nimport CardItem from \"./CardItem\"\r\n// import 'chartjs-plugin-datalabels';\r\n\r\nimport { Bar } from 'react-chartjs-2';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Polar } from 'react-chartjs-2';\r\n\r\n\r\n\r\nclass List extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            'isLoaded': false,\r\n            'data': {},\r\n            'timeline': {},\r\n            'dataLoaded': false,\r\n            'timelineLoaded': false,\r\n        }\r\n    }\r\n\r\n    updateState(obj) {\r\n        // console.log(\"Update called with\", obj);\r\n\r\n        let copy_state = Object.assign({}, this.state)\r\n        let keys = Object.keys(obj)\r\n        for (let key in keys) {\r\n            // console.log(keys[key]);\r\n            let kk = keys[key]\r\n            copy_state[kk] = obj[kk]\r\n        }\r\n        // copy_state[key] = value\r\n        // console.log(\"new state should have been\", copy_state);\r\n\r\n        this.setState(\r\n            copy_state\r\n        )\r\n    }\r\n    fetchAndSet(url, key) {\r\n        // console.log(\"before update \", this.state);\r\n        fetch(url).then(res => res.json()).then(\r\n            (data) => {\r\n\r\n                let change = {\r\n                    [key]: data,\r\n                    // isLoaded: true,\r\n                }\r\n                if (key === \"data\") {\r\n                    change.dataLoaded = true\r\n                }\r\n                if (key === \"timeline\") {\r\n                    change.timelineLoaded = true\r\n                }\r\n                this.updateState(change)\r\n\r\n                if (this.state.dataLoaded && this.state.timelineLoaded) {\r\n                    let change = {\r\n                        isLoaded: true,\r\n                    }\r\n                    this.updateState(change)\r\n                }\r\n                // console.log(\"after update\", this.state);\r\n                return true\r\n            },\r\n            (error) => {\r\n                let change = {\r\n                    error: error,\r\n                    isLoaded: true,\r\n                }\r\n                this.updateState(change)\r\n\r\n            }\r\n        )\r\n    }\r\n    componentDidMount() {\r\n        let url = this.props.url\r\n        let timeline_url = this.props.timeline_url\r\n        this.fetchAndSet(url, 'data')\r\n        this.fetchAndSet(timeline_url, 'timeline')\r\n    }\r\n\r\n    render() {\r\n\r\n        const { error, isLoaded, data, timeline } = this.state;\r\n        // console.log(error, isLoaded, data);\r\n\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            let loader_style = {\r\n                position: \"fixed\",\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                left: \"0\",\r\n                right: \"0\",\r\n                top: \"58px\",\r\n                background: \"#fff\",\r\n                zIndex: \"999999999\",\r\n                bottom: \"0\",\r\n                // display: \"flex\",\r\n            }\r\n            return (<div className=\"loader\">\r\n                <div className=\"corona-loading\" style={loader_style}>\r\n                    <img src=\"./virus.png\" alt=\"\" />\r\n                    <p className=\"text-center\" style={{ margin: \"auto\" }}>Loading result ...</p>\r\n                </div>\r\n            </div>)\r\n        } else {\r\n\r\n\r\n\r\n\r\n            // AmCharts.makeChart(\"chartdiv\", {\r\n            //     \"type\": \"map\",\r\n            //     \"theme\": \"dark\",\r\n            //     \"dataProvider\" : {\r\n            //       \"mapURL\": \"https://www.amcharts.com/lib/3/maps/svg/indiaHigh.svg\",\r\n            //       \"getAreasFromMap\": true\r\n            //     },\r\n            //     \"areasSettings\": {\r\n            //       \"autoZoom\": true,\r\n            //       \"selectedColor\": \"#CC0000\"\r\n            //     }\r\n            //   });\r\n\r\n            let min_to_show = 20;\r\n            let data_list = []\r\n            let card_list = []\r\n            // statewise\r\n            let total_data = []\r\n            let graph_data = {}\r\n            //    graph option at end\r\n            let states_name = []\r\n            let states_cases = []\r\n            let states_recovered = []\r\n            let states_active = []\r\n            let states_death = []\r\n\r\n            // timeline\r\n            let graph_data_timeline = {}\r\n            //    graph option at end\r\n            let timeline_date = []\r\n            let timeline_death = []\r\n            let timeline_cases = []\r\n            let timeline_recovery = []\r\n            let timeline_total = []\r\n\r\n            let graph_data_total_pie = {}\r\n\r\n            let new_col = \"rgba(245,227,66,0.5)\"\r\n            // let new_col=\"rgba(255,50,40,0.4)\"\r\n            let active_col = \"rgba(245,227,66,0.5)\"\r\n            let recovered_col = \"rgba(81,245,66,0.5)\"\r\n            let death_col = \"rgba(255,99,132,0.5)\"\r\n\r\n            let new_col_hover = \"rgba(245,227,66,0.8)\"\r\n            let active_col_hover = \"rgba(245,227,66,0.8)\"\r\n            let recovered_col_hover = \"rgba(81,245,66,0.8)\"\r\n            let death_col_hover = \"rgba(255,99,132,0.8)\"\r\n\r\n            let border_col = \"rgba(201, 179, 193, 1)\"\r\n            let border_col_hover = \"rgba(201, 179, 193, 1)\"\r\n\r\n            const formatter = (value, ctx) => {\r\n                const otherDatasetIndex = ctx.datasetIndex === 0 ? 1 : 0;\r\n                const total =\r\n                    ctx.chart.data.datasets[otherDatasetIndex].data[ctx.dataIndex] + value;\r\n\r\n                return `${(value / total * 100).toFixed(0)}%`;\r\n            };\r\n\r\n            if (this.state.isLoaded) {\r\n                if (this.state.dataLoaded) {\r\n                    console.log(\"loggggggg\", data.state_wise);\r\n                    let all_keys = Object.keys(data.state_wise)\r\n                    let i = 1;\r\n                    for (let key in all_keys) {\r\n                        // console.log(key);\r\n                        key = all_keys[key]\r\n                        if (data.state_wise[key].confirmed > min_to_show) {\r\n\r\n                            states_cases.push(data.state_wise[key].confirmed)\r\n                            states_death.push(data.state_wise[key].deaths)\r\n                            states_recovered.push(data.state_wise[key].recovered)\r\n                            states_active.push(data.state_wise[key].active)\r\n                            states_name.push(key)\r\n                        }\r\n                        data_list.push(\r\n                            <ListItem key={key} rank={i++} data={data.state_wise[key]} />\r\n                        )\r\n                        card_list.push(\r\n                            <CardItem key={i} rank={i++} data={data.state_wise[key]} />\r\n                        )\r\n                    }\r\n\r\n                    total_data = data.total_values;\r\n                    graph_data_total_pie = {\r\n                        labels: [\"Active\", \"Recovered\", \"Deaths\"],\r\n                        datasets: [\r\n                            {\r\n                                // label: \"Active\",\r\n                                backgroundColor: [active_col, recovered_col, death_col],\r\n                                // backgroundColor: active_col,\r\n                                borderColor: border_col,\r\n                                borderWidth: 1,\r\n                                hoverBackgroundColor: [active_col, recovered_col, death_col],\r\n                                // hoverBackgroundColor: active_col_hover,\r\n                                hoverBorderColor: border_col_hover,\r\n                                data: [total_data.active, total_data.recovered, total_data.deaths],\r\n\r\n                            }]\r\n\r\n\r\n                    };\r\n                    graph_data = {\r\n                        labels: states_name,\r\n                        datasets: [\r\n                            {\r\n                                // label: \"India COVID-19-cases\",\r\n                                label: \"Active\",\r\n                                backgroundColor: active_col,\r\n                                borderColor: border_col,\r\n                                borderWidth: 1,\r\n                                hoverBackgroundColor: active_col_hover,\r\n                                hoverBorderColor: border_col_hover,\r\n                                data: states_active,\r\n\r\n                            }, {\r\n                                // label: \"India COVID-19-cases\",\r\n                                label: \"Recovered\",\r\n                                backgroundColor: recovered_col,\r\n                                borderColor: border_col,\r\n                                borderWidth: 1,\r\n                                hoverBackgroundColor: recovered_col_hover,\r\n                                hoverBorderColor: border_col_hover,\r\n                                data: states_recovered\r\n                            }, {\r\n                                // label: \"India COVID-19-cases\",\r\n                                label: \"Deaths\",\r\n                                backgroundColor: death_col,\r\n                                borderColor: border_col,\r\n                                borderWidth: 1,\r\n                                hoverBackgroundColor: death_col_hover,\r\n                                hoverBorderColor: border_col_hover,\r\n                                data: states_death\r\n                            },\r\n\r\n                        ]\r\n                    };\r\n                }\r\n                if (this.state.timelineLoaded) {\r\n\r\n                    for (let key in timeline) {\r\n                        let obj = timeline[key]\r\n                        timeline_date.push(obj.date)\r\n                        timeline_cases.push(obj.dailyconfirmed)\r\n                        timeline_recovery.push(obj.dailyrecovered)\r\n                        timeline_death.push(obj.dailydeceased)\r\n                        timeline_total.push(obj.totalconfirmed)\r\n                    }\r\n                    graph_data_timeline = {\r\n                        labels: timeline_date,\r\n                        datasets: [\r\n                            {\r\n                                // label: \"India COVID-19-cases\",\r\n                                type: 'line',\r\n                                // fill:0,\r\n                                fill: false,\r\n                                label: \"Total Till Date\",\r\n                                backgroundColor: death_col,\r\n                                borderColor: \"red\",\r\n                                borderWidth: 0.2,\r\n                                hoverBackgroundColor: death_col_hover,\r\n                                hoverBorderColor: border_col_hover,\r\n                                data: timeline_total,\r\n\r\n                            },\r\n                            {\r\n                                label: \"New Cases\",\r\n                                backgroundColor: new_col,\r\n                                borderColor: border_col,\r\n                                borderWidth: 0.2,\r\n                                hoverBackgroundColor: new_col_hover,\r\n                                hoverBorderColor: border_col_hover,\r\n                                data: timeline_cases\r\n                            },\r\n                            {\r\n                                label: \"New Recovery\",\r\n                                backgroundColor: recovered_col,\r\n                                borderColor: border_col,\r\n                                borderWidth: 0.2,\r\n                                hoverBackgroundColor: recovered_col_hover,\r\n                                hoverBorderColor: border_col_hover,\r\n                                data: timeline_recovery\r\n                            },\r\n                            {\r\n                                label: \"New Deaths\",\r\n                                backgroundColor: death_col,\r\n                                borderColor: border_col,\r\n                                borderWidth: 0.2,\r\n                                hoverBackgroundColor: death_col_hover,\r\n                                hoverBorderColor: border_col_hover,\r\n                                data: timeline_death\r\n                            },\r\n\r\n                        ]\r\n                    };\r\n                    console.log(graph_data_timeline);\r\n\r\n                }\r\n            }\r\n\r\n\r\n            let plugin_config = {\r\n                // datalabels: {\r\n                //     display: 'auto',\r\n                // //    display: true,\r\n                //    color: 'white',\r\n                // //    padding:10,\r\n                // offset:100,\r\n                // anchor:\"end\"\r\n                // }\r\n            }\r\n\r\n            let graph_data_options = {\r\n                title: {\r\n                    display: true,\r\n                    text: `COVID-19 INDIA STATE WISE (log scale) (where cases >${min_to_show})`\r\n                },\r\n                tooltips: {\r\n                    mode: 'index',\r\n                    intersect: false,\r\n                    titleAlign: \"left\",\r\n                    bodyAlign: \"left\",\r\n                    footerAlign: \"left\",\r\n                },\r\n                responsive: true,\r\n                maintainAspectRatio: true,\r\n                // aspectRatio: 10,\r\n                // height:100,\r\n                scales: {\r\n                    // scaleLabel :{\r\n                    //     fontSize:1\r\n                    // },\r\n                    xAxes: [{\r\n                        stacked: true,\r\n                        ticks: {\r\n                            autoSkip: true,\r\n                            // maxTicksLimit: 10\r\n                            reverse: true,\r\n                        }\r\n\r\n                    }],\r\n                    yAxes: [{\r\n                        stacked: true,\r\n                        display: true,\r\n                        beginAtZero: false,\r\n                        type: \"logarithmic\",\r\n                        ticks: {\r\n                            autoSkip: true,\r\n                            maxTicksLimit: 5\r\n                            // min: 10,\r\n                            // max:100,\r\n                            // sampleSize:10,\r\n                            // autoSkip:true,\r\n                            // mirror:true,\r\n                            // padding:10,\r\n                        }\r\n                    }]\r\n\r\n                },\r\n                plugin: plugin_config,\r\n\r\n\r\n            }\r\n\r\n            let graph_data_timeline_options = {\r\n                title: {\r\n                    display: true,\r\n                    text: 'COVID-19 INDIA DAILY UPDATE'\r\n                },\r\n                tooltips: {\r\n                    mode: 'index',\r\n                    intersect: false,\r\n                    position: 'nearest'\r\n                },\r\n                // responsive: true,\r\n                responsive: true,\r\n                maintainAspectRatio: true,\r\n                scales: {\r\n                    xAxes: [{\r\n                        stacked: false,\r\n\r\n                        ticks: {\r\n                            autoSkip: true,\r\n                            maxTicksLimit: 20\r\n                        }\r\n                    }],\r\n                    yAxes: [{\r\n                        stacked: false,\r\n                        type: \"logarithmic\",\r\n                    }]\r\n                },\r\n                fill: true,\r\n                lineTension: 0.2,\r\n                backgroundColor: 'rgba(75,192,192,0.4)',\r\n                borderColor: 'rgba(75,192,192,1)',\r\n                borderCapStyle: 'butt',\r\n                borderDash: [],\r\n                borderDashOffset: 1.0,\r\n                borderJoinStyle: 'miter',\r\n                pointBorderColor: 'rgba(75,192,192,1)',\r\n                pointBackgroundColor: '#fff',\r\n                pointBorderWidth: 10,\r\n                pointHoverRadius: 50,\r\n                pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 0.2,\r\n                pointHitRadius: 10,\r\n                plugin: plugin_config,\r\n\r\n            }\r\n            let graph_data_total_options = {\r\n                title: {\r\n                    display: true,\r\n                    text: 'COVID-19 INDIA DAILY UPDATE'\r\n                },\r\n\r\n                tooltips: {\r\n                    mode: 'index',\r\n                    intersect: false,\r\n                    position: 'nearest'\r\n                },\r\n                responsive: true,\r\n\r\n                fill: true,\r\n                lineTension: 0.1,\r\n                backgroundColor: 'rgba(75,192,192,0.4)',\r\n                borderColor: 'rgba(75,192,192,1)',\r\n                borderCapStyle: 'butt',\r\n                borderDash: [],\r\n                borderDashOffset: 0.0,\r\n                borderJoinStyle: 'miter',\r\n                pointBorderColor: 'rgba(75,192,192,1)',\r\n                pointBackgroundColor: '#fff',\r\n                pointBorderWidth: 1,\r\n                pointHoverRadius: 5,\r\n                pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                pointHoverBorderWidth: 2,\r\n                pointRadius: 1,\r\n                pointHitRadius: 10,\r\n                plugin: plugin_config,\r\n\r\n            }\r\n\r\n\r\n            return (\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 col-lg-6 my-2\">\r\n                        <h3>Total</h3>\r\n\r\n                        <Pie data={graph_data_total_pie}\r\n                            options={graph_data_total_options}\r\n                        />\r\n                        <span className=\"m-auto font-weight-bold\"> Total: {total_data.confirmed} </span>\r\n                        <span className=\"m-auto font-weight-bold\">/ Active: {total_data.active}</span>\r\n                        <span className=\"m-auto font-weight-bold\">/ Deaths: {total_data.deaths}</span>\r\n                        <span className=\"m-auto font-weight-bold\">/ Recovered: {total_data.recovered}</span>\r\n                        {/* <span class=\"m-auto font-weight-bold\"> Mortality: % </span> */}\r\n                        {/* <span class=\"m-auto font-weight-bold\"> Survival: % </span> */}\r\n                    </div>\r\n                    <div className=\"col-12 col-lg-6 my-2 mt-4\">\r\n                        <h3>State Wise data</h3>\r\n                        <Bar data={graph_data}\r\n                            width={100}\r\n                            height={80}\r\n                            options={graph_data_options}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"col-12 my-2 mt-4\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12 my-2\">\r\n                                <h3>Timeline of India</h3>\r\n\r\n                                <Line data={graph_data_timeline}\r\n                                    width={100}\r\n                                    height={60}\r\n                                    options={graph_data_timeline_options}\r\n                                />\r\n\r\n                            </div>\r\n                            <div className=\"col-12 my-2\">\r\n                                <h3>State Wise Data</h3>\r\n                            </div>\r\n\r\n                            <br />\r\n                            <div className=\"table-responsive\">\r\n                                <table className=\"table table-striped table-hover table-sm \">\r\n                                    <thead>\r\n                                        <tr>\r\n                                            <th scope=\"col\">#</th>\r\n                                            <th scope=\"col\">State</th>\r\n                                            <th scope=\"col\">Active</th>\r\n                                            <th scope=\"col\">Death</th>\r\n                                            <th scope=\"col\">Recovered</th>\r\n                                            <th scope=\"col\">Total</th>\r\n                                            {/* <th scope=\"col\">Graph</th> */}\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody>\r\n                                        {data_list}\r\n                                    </tbody>\r\n                                </table>\r\n                            </div>\r\n\r\n                            <div className=\"col-6\">\r\n                                {/* {card_list} */}\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            );\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default List","import React from \"react\"\r\nimport List from \"./List\"\r\nfunction Content(props){\r\n\r\nreturn(<div>\r\n    {/* <List url=\"https://akashraj.tech/corona/no_log_api\"> */}\r\n    <List url={props.data_url} timeline_url={props.data_timeline_url}>\r\n    {/* <List url=\"./data/api.json\" timeline_url=\"./data/timeline.json\"> */}\r\n    </List>\r\n</div>)\r\n\r\n}\r\n\r\nexport default Content\r\n","import React, { Component } from \"react\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport * as am4maps from \"@amcharts/amcharts4/maps\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport { log } from \"util\";\r\n\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\n\r\nclass Map extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isLoaded:false\r\n        }\r\n    }\r\n\r\n    updateState(obj) {\r\n        // console.log(\"Update called with\", obj);\r\n\r\n        let copy_state = Object.assign({}, this.state)\r\n        let keys = Object.keys(obj)\r\n        for (let key in keys) {\r\n            // console.log(keys[key]);\r\n            let kk = keys[key]\r\n            copy_state[kk] = obj[kk]\r\n        }\r\n        // copy_state[key] = value\r\n        // console.log(\"new state should have been\", copy_state);\r\n\r\n\r\n        this.setState(\r\n            copy_state\r\n        )\r\n    }\r\n\r\n    fetchAndSet(url, key) {\r\n        // console.log(\"before update \", this.state);\r\n        fetch(url).then(res => res.json()).then(\r\n            (data) => {\r\n                // console.log(data);\r\n\r\n                // let change = {\r\n                //     [key]: data,\r\n                //     // isLoaded: true,\r\n                //     timelineLoaded: true,\r\n                // }\r\n                // if (key === \"data\") {\r\n                //     change.dataLoaded = true\r\n                // }\r\n                // if (key === \"timeline\") {\r\n                //     change.timelineLoaded = true\r\n                // }\r\n                // this.updateState(change)\r\n\r\n                // if (this.state.dataLoaded && this.state.timelineLoaded) {\r\n                //     let change = {\r\n                //         isLoaded: true,\r\n                //     }\r\n                //     this.updateState(change)\r\n                // }\r\n                // console.log(\"after update\", this.state);\r\n                return data\r\n            },\r\n            (error) => {\r\n                let change = {\r\n                    error: error,\r\n                    isLoaded: true,\r\n                }\r\n                this.updateState(change)\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n\r\n        let url = this.props.url\r\n        let india_map_url = \"./data/india_map.json\"\r\n        let india_map_dict = \"./data/india_map_dict.json\"\r\n        let data = await fetch(url).then(res => res.json()).then(\r\n            (data) => {return data},\r\n            (error)=>{\r\n                this.updateState({error:error})\r\n                return{}\r\n            }\r\n        )\r\n        let am4geodata_indiaHigh = await fetch(india_map_url).then(res => res.json()).then(\r\n            (data) => {return data},\r\n            (error)=>{\r\n                this.updateState({error:error})\r\n                return{}\r\n            }\r\n        )\r\n        let india_dict = await fetch(india_map_dict).then(res => res.json()).then(\r\n            (data) => {return data},\r\n            (error)=>{\r\n                this.updateState({error:error})\r\n                return{}\r\n            }\r\n        )\r\n\r\n        if(this.state.error){\r\n            return\r\n        }\r\n        let states_cases = []\r\n        // let states_name = []\r\n        // let states_recovered = []\r\n        // let states_active = []\r\n        // let states_death = []\r\n\r\n        let mapData = []\r\n\r\n        var total_len = am4geodata_indiaHigh.features.length\r\n        for (let i = 0; i < total_len; i++) {\r\n            let key = am4geodata_indiaHigh.features[i].properties.name\r\n            // console.log(key);\r\n            if (!key) {\r\n                continue\r\n            }\r\n\r\n            if (!parseInt(data.state_wise[key].confirmed)) {\r\n                data.state_wise[key].confirmed = 0\r\n            }\r\n\r\n            let confirmed = parseInt(data.state_wise[key].confirmed)\r\n            let deaths = parseInt(data.state_wise[key].deaths)\r\n            let recovered = parseInt(data.state_wise[key].recovered)\r\n            let active = parseInt(data.state_wise[key].active)\r\n            states_cases.push(confirmed)\r\n            // states_death.push(deaths)\r\n            // states_recovered.push(recovered)\r\n            // states_active.push(active)\r\n            // states_name.push(key)\r\n            // let color_circle = `rgba(${confirmed},${deaths},${recovered},0.2)`\r\n            // let color_fill = `rgba(${confirmed},${deaths},${recovered},0.2)`\r\n            let color_circle = `rgba(${confirmed},50,50,0.8)`\r\n            let color_fill = `rgba(${confirmed},100,100,0.5)`\r\n            am4geodata_indiaHigh.features[i].properties.value = confirmed\r\n            am4geodata_indiaHigh.features[i].properties.deaths = deaths\r\n            am4geodata_indiaHigh.features[i].properties.recovered = recovered\r\n            am4geodata_indiaHigh.features[i].properties.active = active\r\n            am4geodata_indiaHigh.features[i].properties.color = color_fill\r\n            mapData.push(\r\n                {\r\n                    \"id\": india_dict[key],\r\n                    \"name\": key,\r\n                    \"value\": confirmed,\r\n                    \"deaths\": deaths,\r\n                    \"recovered\": recovered,\r\n                    \"active\": active,\r\n                    \"color\": color_circle,\r\n                }\r\n            )\r\n\r\n        }\r\n\r\n        this.updateState({\r\n            isLoaded:true,\r\n            error:false,\r\n        })\r\n\r\n        let min_val = Math.min(...states_cases)\r\n        let max_val = Math.max(...states_cases)\r\n\r\n\r\n\r\n        // Themes begin\r\n        am4core.useTheme(am4themes_animated);\r\n        // Themes end\r\n\r\n        // Create map instance\r\n        var chart = am4core.create(\"map-chart-container\", am4maps.MapChart);\r\n        // chart.theme = \"dark\"\r\n\r\n        chart.responsive.enabled = true;\r\n\r\n        // heatmap\r\n        let heatLegend = chart.createChild(am4charts.HeatLegend);\r\n        heatLegend.minColor = am4core.color(`rgba(${min_val},50,50,0.8)`);\r\n        heatLegend.maxColor = am4core.color(`rgba(${max_val},50,50,0.8)`);\r\n        // heatLegend.maxColor = am4core.color(\"#ED7B84\");\r\n        heatLegend.minValue = min_val;\r\n        heatLegend.maxValue = max_val;\r\n        // heatLegend.series = states_cases;\r\n        heatLegend.width = am4core.percent(100);\r\n        heatLegend.valueAxis.renderer.labels.template.fontSize = 9;\r\n        heatLegend.valueAxis.renderer.minGridDistance = 30;\r\n        heatLegend.orientation = \"vertical\";\r\n        // heatLegend.markerContainer.height = am4core.percent(100);\r\n\r\n\r\n\r\n\r\n\r\n\r\n        var total_data = data.total_values\r\n        var title = chart.titles.create();\r\n        title.text = ` Total: [bold]${total_data.confirmed}[/] Recovered: [bold]${total_data.recovered}[/] Deaths: [bold]${total_data.deaths}`;\r\n        // title.text = \"[bold font-size: 20]India COVID-19 Spread[/]\";\r\n        // title.textAlign = \"middle\";\r\n\r\n        chart.geodata = am4geodata_indiaHigh;\r\n        chart.focusable = true;\r\n\r\n        // Set projection\r\n        chart.projection = new am4maps.projections.Miller();\r\n\r\n        // Create map polygon series\r\n        var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());\r\n        // polygonSeries.exclude = [\"IN-MH\"];\r\n        polygonSeries.useGeodata = true;\r\n        polygonSeries.nonScalingStroke = true;\r\n        polygonSeries.strokeWidth = 0.5;\r\n        polygonSeries.calculateVisualCenter = true;\r\n\r\n        var imageSeries = chart.series.push(new am4maps.MapImageSeries());\r\n        imageSeries.data = mapData;\r\n        imageSeries.dataFields.value = \"value\";\r\n\r\n        var imageTemplate = imageSeries.mapImages.template;\r\n        imageTemplate.nonScaling = false\r\n\r\n\r\n        var polygonTemplate = polygonSeries.mapPolygons.template;\r\n        polygonTemplate.nonScaling = false\r\n        polygonTemplate.propertyFields.fill = \"color\";\r\n        polygonTemplate.fillOpacity = 1;\r\n        polygonTemplate.tooltipText = `[bold] {name}[/]\r\n        -------\r\n        Total: [bold]{value}[/] \r\n        Recovered: [bold]{recovered}[/] \r\n        Deaths: [bold]{deaths}`;\r\n\r\n        var hs = polygonTemplate.states.create(\"hover\");\r\n        hs.propertyFields.fill = \"color\";\r\n        hs.fillOpacity = 0;\r\n\r\n        var circle = imageTemplate.createChild(am4core.Circle);\r\n        circle.fillOpacity = 1;\r\n        circle.propertyFields.fill = \"color\";\r\n        circle.tooltipText = `[bold] {name}[/]\r\n        -------\r\n        Total: [bold]{value}[/] \r\n        Recovered: [bold]{recovered}[/] \r\n        Deaths: [bold]{deaths}`;\r\n        // console.log(states_cases)\r\n        // console.log(\"max\", Math.max(...states_cases))\r\n        imageSeries.heatRules.push({\r\n            \"target\": circle,\r\n            \"property\": \"radius\",\r\n            \"min\": 5,\r\n            \"max\": 50,\r\n            \"dataField\": \"value\"\r\n        })\r\n\r\n        imageTemplate.adapter.add(\"latitude\", function (latitude, target) {\r\n            var polygon = polygonSeries.getPolygonById(target.dataItem.dataContext.id);\r\n            if (polygon) {\r\n                return polygon.visualLatitude;\r\n            }\r\n            return latitude;\r\n        })\r\n\r\n        imageTemplate.adapter.add(\"longitude\", function (longitude, target) {\r\n            var polygon = polygonSeries.getPolygonById(target.dataItem.dataContext.id);\r\n            if (polygon) {\r\n                return polygon.visualLongitude;\r\n            }\r\n            return longitude;\r\n        })\r\n\r\n\r\n\r\n        polygonTemplate.events.on(\"over\", function (ev) {\r\n            if (!isNaN(ev.target.dataItem.value)) {\r\n                heatLegend.valueAxis.showTooltipAt(ev.target.dataItem.value)\r\n            }\r\n            else {\r\n                heatLegend.valueAxis.hideTooltip();\r\n            }\r\n        });\r\n\r\n        polygonTemplate.events.on(\"out\", function (ev) {\r\n            heatLegend.valueAxis.hideTooltip();\r\n        });\r\n\r\n        imageTemplate.events.on(\"over\", function (ev) {\r\n            if (!isNaN(ev.target.dataItem.value)) {\r\n                heatLegend.valueAxis.showTooltipAt(ev.target.dataItem.value)\r\n            }\r\n            else {\r\n                heatLegend.valueAxis.hideTooltip();\r\n            }\r\n        });\r\n\r\n        imageTemplate.events.on(\"out\", function (ev) {\r\n            heatLegend.valueAxis.hideTooltip();\r\n        });\r\n\r\n\r\n        // console.log(chart);\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.chart) {\r\n            this.chart.dispose();\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let error=this.state.error\r\n        let isLoaded=this.state.isLoaded\r\n        if (error) {\r\n            return <div>Error: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            let loader_style = {\r\n                position: \"fixed\",\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                left: \"0\",\r\n                right: \"0\",\r\n                top: \"58px\",\r\n                background: \"#fff\",\r\n                zIndex: \"999999999\",\r\n                bottom: \"0\",\r\n                // display: \"flex\",\r\n            }\r\n            return (<div className=\"loader\">\r\n                <div className=\"corona-loading\" style={loader_style}>\r\n                    <img className=\"mt-5\" src=\"./virus.png\" alt=\"\" />\r\n                    <p className=\"text-center\" style={{ margin: \"auto\" }}>Loading result ...</p>\r\n                </div>\r\n            </div>)\r\n        } else {\r\n            return (\r\n\r\n                <div>\r\n                    {/* This is map */}\r\n                    <div id=\"map-chart-container\" style={{ width: \"100%\", height: \"500px\" }}></div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Map","import React, { Component } from \"react\";\r\nimport * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\n\r\nam4core.useTheme(am4themes_animated);\r\n\r\n\r\nclass Timeline extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            mapLoaded: false,\r\n            mapData: {},\r\n            timelineLoaded: false,\r\n            timeline: {}\r\n        }\r\n    }\r\n\r\n    updateState(obj) {\r\n        // console.log(\"Update called with\", obj);\r\n\r\n        let copy_state = Object.assign({}, this.state)\r\n        let keys = Object.keys(obj)\r\n        for (let key in keys) {\r\n            // console.log(keys[key]);\r\n            let kk = keys[key]\r\n            copy_state[kk] = obj[kk]\r\n        }\r\n        // copy_state[key] = value\r\n        // console.log(\"new state should have been\", copy_state);\r\n\r\n\r\n        this.setState(\r\n            copy_state\r\n        )\r\n    }\r\n\r\n    fetchAndSet(url, key) {\r\n        // console.log(\"before update \", this.state);\r\n        fetch(url).then(res => res.json()).then(\r\n            (data) => {\r\n                // console.log(data);\r\n\r\n                // let change = {\r\n                //     [key]: data,\r\n                //     // isLoaded: true,\r\n                //     timelineLoaded: true,\r\n                // }\r\n                // if (key === \"data\") {\r\n                //     change.dataLoaded = true\r\n                // }\r\n                // if (key === \"timeline\") {\r\n                //     change.timelineLoaded = true\r\n                // }\r\n                // this.updateState(change)\r\n\r\n                // if (this.state.dataLoaded && this.state.timelineLoaded) {\r\n                //     let change = {\r\n                //         isLoaded: true,\r\n                //     }\r\n                //     this.updateState(change)\r\n                // }\r\n                // console.log(\"after update\", this.state);\r\n                return data\r\n            },\r\n            (error) => {\r\n                let change = {\r\n                    error: error,\r\n                    isLoaded: true,\r\n                }\r\n                this.updateState(change)\r\n\r\n            }\r\n        )\r\n    }\r\n    async componentDidMount() {\r\n\r\n        // let url = this.props.url\r\n        let timeline_url = this.props.timeline_url\r\n        // this.fetchAndSet(url, 'data')\r\n        // let timeline=this.fetchAndSet(timeline_url, 'timeline')\r\n        let timeline = await fetch(timeline_url).then(res => res.json())\r\n        // let timeline_data=await timeline;\r\n\r\n        // console.log('timeline', timeline);\r\n\r\n        let timeline_date = []\r\n        let timeline_death = []\r\n        let timeline_cases = []\r\n        let timeline_recovery = []\r\n        let timeline_total = []\r\n\r\n        // console.log(\"state---------\", this.state);\r\n        let data=[]\r\n        if (timeline) {\r\n            for (let key in timeline) {\r\n                let obj = timeline[key]\r\n                timeline_date.push(new Date(obj.date + \" 2020\"))\r\n                timeline_cases.push(obj.dailyconfirmed)\r\n                timeline_recovery.push(obj.dailyrecovered)\r\n                timeline_death.push(-obj.dailydeceased)\r\n                timeline_total.push(obj.totalconfirmed)\r\n                data.push({date:new Date(obj.date + \" 2020\"),name:\"Death\" ,value: parseInt(obj.dailyconfirmed)})\r\n                // data.push({date:new Date(obj.date + \" 2020\"),name:\"Recovery\" ,value: parseInt(obj.dailyrecovered)})\r\n            }\r\n        }\r\n\r\n        // console.log(timeline_date);\r\n        let chart = am4core.create(\"chart-timeline-container\", am4charts.XYChart);\r\n        chart.paddingRight = 20;\r\n\r\n        chart.data = data;\r\n        // console.log(data);\r\n\r\n        let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n        dateAxis.renderer.grid.template.location = 0;\r\n\r\n        let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n        valueAxis.tooltip.disabled = true;\r\n        valueAxis.renderer.minWidth = 1;\r\n\r\n        let series = chart.series.push(new am4charts.LineSeries());\r\n        series.dataFields.dateX = \"date\";\r\n        series.dataFields.valueY = \"value\";\r\n\r\n        series.tooltipText = \"On {dateX} - {valueY.value} new cases\";\r\n        chart.cursor = new am4charts.XYCursor();\r\n\r\n        let scrollbarX = new am4charts.XYChartScrollbar();\r\n        scrollbarX.series.push(series);\r\n        chart.scrollbarX = scrollbarX;\r\n\r\n        this.chart = chart;\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        if (this.chart) {\r\n            this.chart.dispose();\r\n        }\r\n    }\r\n\r\n   \r\n    render() {\r\n\r\n\r\n\r\n        return (\r\n\r\n            <div className=\"my-4\">\r\n            <h4>\r\n                Interactive Timeline\r\n            </h4>\r\n            <div id=\"chart-timeline-container\" style={{ width: \"100%\", height: \"500px\" }}></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Timeline","import React from \"react\"\r\nimport Map from \"./components/Map\"\r\nimport Timeline from \"./components/Timeline\"\r\nfunction Content(props){\r\n\r\nreturn(<div>\r\n    <Map url={props.data_url} timeline_url={props.data_timeline_url}>\r\n    </Map>\r\n    {/* <Timeline url={props.data_url} timeline_url={props.data_timeline_url}>\r\n    </Timeline> */}\r\n</div>)\r\n\r\n}\r\n\r\nexport default Content\r\n","import React from \"react\"\r\nimport {Link} from \"react-router-dom\"\r\nfunction MenuItem(props) {\r\n    // console.log(\"menu_prop\", props);\r\n\r\n    return (\r\n        <Link className=\"nav-link\" to={props.data.href}>\r\n            {props.data.text}\r\n        </Link>\r\n    )\r\n}\r\nexport default MenuItem","import React from \"react\"\r\nimport MenuItem from \"./MenuItem\"\r\nimport {Link} from \"react-router-dom\"\r\nfunction Menu(props) {\r\n\r\n    // let menu_list = []\r\n\r\n    const menu_list = props.menu_items.map((value, index) => <MenuItem key={index} data={value} />)\r\n\r\n\r\n    //     menu_list.append(<MenuItem data={element} />)\r\n    // });\r\n\r\n    return (\r\n        <nav\r\n            className=\"nav navbar navbar-light navbar-expand-lg sticky-top justify-content-between\"\r\n            style={{ backgroundColor: \"#e3f2fd\" }}\r\n        >\r\n            <Link className=\"nav-link navbar-brand\" to=\"/\">\r\n                COVID-19\r\n        </Link>\r\n            <button className=\"navbar-toggler d-none\" type=\"button\" data-toggle=\"collapse\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            {menu_list}\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Menu","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route }  from 'react-router-dom'\n\n// import logo from './logo.svg';\nimport './App.css';\nimport Header from \"./Header\"\nimport Footer from \"./Footer\"\nimport CoronaPage1 from \"./corona-1/components/Content\"\nimport CoronaPage2 from \"./corona-2/Content\"\nimport Menu from \"./Menu/Menu\"\n\nfunction App() {\n  const menuItems = [\n    {\n      text: 'Home',\n      href: \"/\",\n    },\n    {\n      text: 'Graphs',\n      href: \"/graphs\",\n    },\n    // {\n    //   text: 'Sample 3',\n    //   href: \"/3\",\n    // },\n  ] \n\n  // const data_url=\"https://akashraj.tech/corona/no_log_api\"\n  const data_url=\"https://akashraj.tech/corona/api_india\"\n  const data_timeline_url=\"https://akashraj.tech/corona/api_india_timeline\"\n  // const data_url=\"./data/api.json\"\n  // const data_timeline_url=\"./data/timeline.json\"\n\n  return (\n    <div className=\"App\">\n      <Router path=\"/\" basename={\"/corona/react\"}>\n        <Menu menu_items={menuItems} />\n        <Header />\n        {/* <div className=\"container\"> */}\n        <div className=\"mx-2 mx-md-5 mx-xl-5 px-0 px-md-5 px-xl-5\">\n          <Switch>\n            {/* <Route path=\"/\" exact component={CoronaPage1} /> */}\n            <Route path=\"/\" exact render={(props)=> <CoronaPage2 {...props} data_url={data_url} data_timeline_url={data_timeline_url} />} />\n            <Route path=\"/graphs\" exact render={(props)=> <CoronaPage1 {...props} data_url={data_url} data_timeline_url={data_timeline_url} />} />\n            {/* <Route path=\"/2\" component={CoronaPage2} /> */}\n          </Switch>\n        </div>\n      </Router>\n      <Footer />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}